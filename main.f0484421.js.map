{"version":3,"sources":["src/shared/canvas.js","src/KeyboardHandler.js","src/input.js","src/AudioPlayer.js","src/classes/loaders.js","src/classes/character.js","src/classes/scene.js","src/shared/helpers.js","src/classes/spider.js","src/shared/UI.js","src/classes/plant.js","src/classes/light.js","src/classes/timer.js","src/classes/index.js","src/clickHandler.js","src/gameLoop.js","static/manifests/gameConfig.json","src/main.js"],"names":["canvas","document","querySelector","ctx","getContext","font","width","innerWidth","height","innerHeight","mask","createElement","maskCtx","groundPositionX","groundHeight","groundY","resizeCanvas","canvasCenter","x","y","window","addEventListener","KeyboardHandler","constructor","keyStates","Map","keyMap","addMapping","code","callback","set","handleEvent","event","has","preventDefault","keyState","type","get","listenTo","forEach","eventName","setUpKeyboard","character","keyboard","direction","right","left","jumping","setUpMouse","clientX","clientY","rotate","e","onClick","AudioPlayer","audioContext","AudioContext","audioBuffers","muted","gainNode","createGain","loadAudio","src","fetch","then","response","arrayBuffer","decodeAudioData","addAudio","name","buffer","playAudio","source","createBufferSource","connect","destination","start","toggleMuteAudio","gain","value","loadAllSounds","Promise","all","audioPlayer","gunshotSrc","splashSrc","glassShatterSrc","musicSrc","gunshot","splash","glass","music","loadImage","url","resolve","image","Image","loadManifest","res","json","loadAnimations","animations","animationsMap","animation","spriteMap","frames","frame","rect","Character","manifest","isOnGround","deltaX","deltaY","angle","velocityX","velocityY","gravity","flip","shot","distance","ready","streak","highestStreak","lowerBody","runningAnimation","jumpingAnimation","upperBody","flashAnimation","active","duration","flashImage","shootingAnimation","size","setUp","draw","rotationPoint","strokeStyle","getFrame","Math","floor","translate","runShootingAnimation","drawImage","imageFlipped","setTransform","fillStyle","move","spriteSheet","drawFlash","fillRect","atan2","PI","loadCharacter","spriteSheetURL","imageURL","flippedImageURL","flashImageURL","animationsToBeLoaded","Scene","loadScene","mainImageURL","getRandomInt","max","random","randomIntFromRange","min","checkCollision","obj1","obj2","Spider","position","isShot","hasKilledAPlant","killer","splashAngle","cos","sin","points","shown","speed","multiplier","splashImage","drawPoints","plants","plant","plantBoundingRect","shrink","game","state","spidersKilled","config","levels","level","numberOfSpiders","textAlign","fillText","spidersKilledTotal","score","biggestStreak","SpiderFactory","createSpiders","spiders","i","length","push","loadSpiderFactory","splashImageURL","querySelectorAll","audioElement","addEventListeners","el","target","dataset","id","plantSeed","classList","toggle","showGameOver","remove","innerHTML","reduce","acc","updateLevel","innerText","updateScore","updateStreak","streakCont","offsetWidth","add","hideLoadingScreen","PlantFactory","createPlants","numberOfPlants","loadedPlantImages","potMargin","plantSizes","widthSum","offset","Plant","positionX","positionY","plantImages","planted","showSeed","potCenter","timeToShowSeedButton","activePlant","activePlantImage","createSeedButton","grow","seedsPlanted","outerHTML","showSeedButton","overlay","loadPlantFactory","Light","color","lightWidth","turnOn","numberOfLights","lampCenter","turnedOn","perspective","drawLight","beginPath","moveTo","lineTo","closePath","fill","drawBody","LightFactory","createLights","delay","lightMargin","lights","light","loadLightFactory","Timer","startTime","timeElapsed","Date","logTimeElapsed","timeDiff","seconds","round","getTimeElapsed","checkTarget","targets","find","GameLoop","seedsShown","currentLevel","gameOver","levelUpdated","console","log","timer","scene","plantFactory","lightFactory","spiderFactory","settings","numberOfPots","lamps","timing","startLights","entity","nextLevel","gameLoop","globalCompositeOperation","spider","showSeeds","lamp","requestAnimationFrame","module","exports","delayBetweenLights","titleScreen","tutorialScreen","startGame"],"mappings":"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","file":"main.f0484421.js","sourceRoot":"..","sourcesContent":["export const canvas = document.querySelector('canvas')\r\nexport const ctx = canvas.getContext('2d')\r\nctx.font = '30px Anton'\r\ncanvas.width = innerWidth\r\ncanvas.height = innerHeight\r\n\r\nexport const mask = document.createElement('canvas')\r\nexport const maskCtx = mask.getContext('2d')\r\nmask.width = innerWidth\r\nmask.height = innerHeight\r\n\r\nexport const groundPositionX = 0\r\n\r\nexport const groundHeight = 15\r\n\r\nexport let groundY = canvas.height - groundHeight\r\n\r\nconst resizeCanvas = () => {\r\n    canvas.width = innerWidth\r\n    canvas.height = innerHeight\r\n    mask.width = innerWidth\r\n    mask.height = innerHeight\r\n    groundY = canvas.height - groundHeight\r\n}\r\n\r\nexport const canvasCenter = { x: canvas.width / 2, y: canvas.height / 2 }\r\n\r\nwindow.addEventListener('resize', resizeCanvas)\r\n","export default class KeyboardHandler {\r\n    constructor() {\r\n        // Holds the current state of a given key\r\n        this.keyStates = new Map()\r\n\r\n        // Holds the callback functions for a key code\r\n        this.keyMap = new Map()\r\n    }\r\n\r\n    addMapping(code, callback) {\r\n        this.keyMap.set(code, callback)\r\n    }\r\n\r\n    handleEvent(event) {\r\n        const { code } = event\r\n\r\n        if (!this.keyMap.has(code)) {\r\n            return\r\n        }\r\n\r\n        event.preventDefault()\r\n\r\n        const keyState = event.type === 'keydown' ? true : false\r\n\r\n        if (this.keyStates.get(code) === keyState) {\r\n            return\r\n        }\r\n\r\n        this.keyStates.set(code, keyState)\r\n\r\n        this.keyMap.get(code)(keyState)\r\n    }\r\n\r\n    listenTo(window) {\r\n        ;['keydown', 'keyup'].forEach(eventName => {\r\n            window.addEventListener(eventName, event => {\r\n                this.handleEvent(event)\r\n            })\r\n        })\r\n    }\r\n}\r\n","import KeyboardHandler from './KeyboardHandler'\r\nimport { canvas } from '/src/shared/canvas'\r\n\r\nexport const setUpKeyboard = character => {\r\n    const keyboard = new KeyboardHandler()\r\n\r\n    keyboard.addMapping('KeyD', keyState => {\r\n        character.direction.right = keyState\r\n    })\r\n\r\n    keyboard.addMapping('KeyA', keyState => {\r\n        character.direction.left = keyState\r\n    })\r\n\r\n    keyboard.addMapping('Space', keyState => {\r\n        character.direction.jumping = keyState\r\n    })\r\n\r\n    keyboard.listenTo(window)\r\n}\r\n\r\nexport const setUpMouse = character => {\r\n    canvas.addEventListener('mousemove', ({ clientX, clientY }) => {\r\n        character.rotate(clientX, clientY)\r\n    })\r\n    canvas.addEventListener('click', e => {\r\n        character.onClick()\r\n    })\r\n}\r\n","import gunshotSrc from '/static/sounds/ShotgunQuieter.mp3'\r\nimport splashSrc from '/static/sounds/Splash.mp3'\r\nimport glassShatterSrc from '/static/sounds/GlassShatter.mp3'\r\nimport musicSrc from '/static/sounds/reggae.mp3'\r\n\r\nexport class AudioPlayer {\r\n    constructor() {\r\n        this.audioContext = new AudioContext()\r\n        this.audioBuffers = new Map()\r\n        this.muted = false\r\n        this.gainNode = this.audioContext.createGain()\r\n    }\r\n    loadAudio(src) {\r\n        return fetch(src)\r\n            .then(response => response.arrayBuffer())\r\n            .then(arrayBuffer => this.audioContext.decodeAudioData(arrayBuffer))\r\n    }\r\n    addAudio(name, buffer) {\r\n        this.audioBuffers.set(name, buffer)\r\n    }\r\n    playAudio(name) {\r\n        const source = this.audioContext.createBufferSource()\r\n        source.connect(this.gainNode)\r\n        this.gainNode.connect(this.audioContext.destination)\r\n        source.buffer = this.audioBuffers.get(name)\r\n        source.start(0)\r\n    }\r\n    toggleMuteAudio() {\r\n        if (!this.muted) {\r\n            this.muted = true\r\n            this.gainNode.gain.value = 0\r\n        } else {\r\n            this.muted = false\r\n            this.gainNode.gain.value = 1\r\n        }\r\n    }\r\n    async loadAllSounds() {\r\n        await Promise.all([\r\n            audioPlayer.loadAudio(gunshotSrc),\r\n            audioPlayer.loadAudio(splashSrc),\r\n            audioPlayer.loadAudio(glassShatterSrc),\r\n            audioPlayer.loadAudio(musicSrc)\r\n        ]).then(([gunshot, splash, glass, music]) => {\r\n            audioPlayer.addAudio('gunshot', gunshot)\r\n            audioPlayer.addAudio('splash', splash)\r\n            audioPlayer.addAudio('glass', glass)\r\n            audioPlayer.addAudio('music', music)\r\n        })\r\n    }\r\n}\r\n\r\nexport const audioPlayer = new AudioPlayer()\r\naudioPlayer.toggleMuteAudio()\r\n","export function loadImage(url) {\r\n    return new Promise(resolve => {\r\n        const image = new Image()\r\n        image.addEventListener('load', () => {\r\n            resolve(image)\r\n        })\r\n        image.src = url\r\n    })\r\n}\r\n\r\nexport function loadManifest(name) {\r\n    return fetch(`./manifests/${name}.json`).then(res => res.json())\r\n}\r\n\r\nexport function loadAnimations(animations) {\r\n    const animationsMap = new Map()\r\n    animations.forEach(animation => {\r\n        const spriteMap = new Map()\r\n        animation.frames.forEach(frame => {\r\n            spriteMap.set(frame.name, frame.rect)\r\n        })\r\n        animationsMap.set(animation.name, spriteMap)\r\n    })\r\n    return animationsMap\r\n}\r\n","import { canvas } from '/src/shared/canvas'\r\nimport { groundHeight } from '/src/shared/canvas'\r\nimport { setUpKeyboard, setUpMouse } from '../input'\r\nimport { audioPlayer } from '../AudioPlayer'\r\nimport { loadImage, loadManifest, loadAnimations } from './loaders'\r\nimport { groundY } from '/src/shared/canvas'\r\n\r\nexport class Character {\r\n    constructor(manifest) {\r\n        this.manifest = manifest\r\n        this.direction = {\r\n            left: false,\r\n            right: false,\r\n            jumping: false\r\n        }\r\n        this.isOnGround = true\r\n        this.deltaX = 0\r\n        this.deltaY = 0\r\n        this.angle = 0\r\n        this.velocityX = 6\r\n        this.velocityY = 0\r\n        this.gravity = 0.6\r\n        this.flip = false\r\n        this.shot = false\r\n        this.distance = 0\r\n        this.ready = true\r\n        this.streak = 0\r\n        this.highestStreak = 0\r\n        this.lowerBody = {\r\n            ...this.manifest.lowerBody,\r\n            runningAnimation: this.manifest.animations.get('running'),\r\n            jumpingAnimation: this.manifest.animations.get('jumping')\r\n        }\r\n        this.upperBody = {\r\n            ...this.manifest.upperBody,\r\n            x: this.x - 30,\r\n            y: this.y - this.lowerBody.height + 70\r\n        }\r\n        this.x = 0\r\n        this.y = canvas.height - groundHeight - this.lowerBody.height + 5\r\n        this.flashAnimation = {\r\n            active: false,\r\n            duration: 3,\r\n            frame: 0,\r\n            image: this.manifest.flashImage\r\n        }\r\n        this.shootingAnimation = {\r\n            active: false,\r\n            duration: 4,\r\n            frame: 0,\r\n            size: 5\r\n        }\r\n        this.setUp()\r\n    }\r\n    draw(ctx) {\r\n        this.upperBody = {\r\n            ...this.upperBody,\r\n            rotationPoint: {\r\n                x: this.x + this.lowerBody.width / 2,\r\n                y: this.y + 25\r\n            },\r\n            x: this.x - 25,\r\n            y: this.y - this.lowerBody.height + (this.flip ? 160 : 100)\r\n        }\r\n        ctx.strokeStyle = 'red'\r\n        //ctx.strokeRect(this.x, this.y, this.lowerBody.width, this.lowerBody.height)\r\n        this.getFrame(ctx, `walk-${Math.floor(this.distance / 20) % this.lowerBody.runningAnimation.size}`)\r\n        //this.getFrame(ctx, 'walk-1')\r\n        ctx.translate(this.upperBody.rotationPoint.x, this.upperBody.rotationPoint.y)\r\n        ctx.rotate(this.angle)\r\n        ctx.translate(-this.upperBody.rotationPoint.x, -this.upperBody.rotationPoint.y)\r\n        ctx.strokeStyle = 'limegreen'\r\n        this.runShootingAnimation()\r\n        ctx.drawImage(\r\n            this.flip ? this.upperBody.imageFlipped : this.upperBody.image,\r\n            this.upperBody.x,\r\n            this.upperBody.y,\r\n            this.upperBody.width,\r\n            this.upperBody.height\r\n        )\r\n        //ctx.strokeRect(this.upperBody.x, this.upperBody.y, this.upperBody.width, this.upperBody.height)\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0)\r\n        ctx.fillStyle = 'blue'\r\n        //d ctx.fillRect(this.upperBody.rotationPoint.x - 5, this.upperBody.rotationPoint.y - 5, 10, 10)\r\n    }\r\n    move() {\r\n        this.velocityY += this.gravity\r\n        this.y += this.velocityY\r\n\r\n        if (this.y + this.lowerBody.height >= groundY) {\r\n            this.y = groundY - this.lowerBody.height\r\n            this.isOnGround = true\r\n            this.velocityY = 0.0\r\n        }\r\n\r\n        if (this.direction.left) {\r\n            if (this.x > 0) {\r\n                this.x -= this.velocityX\r\n                this.distance += this.velocityX\r\n            }\r\n        } else if (this.direction.right) {\r\n            if (this.x < canvas.width - this.upperBody.width) {\r\n                this.x += this.velocityX\r\n                this.distance += this.velocityX\r\n            }\r\n        } else {\r\n            if (this.ready) this.distance = 0\r\n        }\r\n        if (this.direction.jumping) {\r\n            if (this.isOnGround) {\r\n                this.velocityY = -12.0\r\n                this.isOnGround = false\r\n            }\r\n        }\r\n    }\r\n    getFrame(ctx, name) {\r\n        if (this.isOnGround) {\r\n            const frame = this.lowerBody.runningAnimation.get(name)\r\n            if (frame) {\r\n                ctx.drawImage(\r\n                    this.lowerBody.spriteSheet,\r\n                    frame.x,\r\n                    this.flip ? frame.y + frame.height : frame.y,\r\n                    frame.width,\r\n                    frame.height,\r\n                    this.x,\r\n                    this.y,\r\n                    this.lowerBody.width,\r\n                    this.lowerBody.height\r\n                )\r\n            } else {\r\n                ctx.drawImage(\r\n                    this.lowerBody.spriteSheet,\r\n                    frame.x,\r\n                    this.flip ? frame.y + frame.height : frame.y,\r\n                    frame.width,\r\n                    frame.height,\r\n                    this.x,\r\n                    this.y,\r\n                    this.lowerBody.width,\r\n                    this.lowerBody.height\r\n                )\r\n            }\r\n        } else {\r\n            const frame = this.lowerBody.jumpingAnimation.get('jump-0')\r\n            ctx.drawImage(\r\n                this.lowerBody.spriteSheet,\r\n                frame.x,\r\n                this.flip ? frame.y + frame.height : frame.y,\r\n                frame.width,\r\n                frame.height,\r\n                this.x,\r\n                this.y,\r\n                this.lowerBody.width,\r\n                this.lowerBody.height\r\n            )\r\n        }\r\n    }\r\n    drawFlash(maskCtx) {\r\n        if (this.flashAnimation.active == true) {\r\n            if (this.flashAnimation.frame >= this.flashAnimation.duration) {\r\n                this.flashAnimation.frame = 0\r\n                this.flashAnimation.active = false\r\n            } else {\r\n                this.flashAnimation.frame++\r\n                maskCtx.fillStyle = 'rgba(249, 191, 0, 0.1)'\r\n                maskCtx.fillRect(0, 0, canvas.width, canvas.height)\r\n                maskCtx.translate(this.upperBody.rotationPoint.x, this.upperBody.rotationPoint.y)\r\n                maskCtx.rotate(this.angle)\r\n                maskCtx.translate(-this.upperBody.rotationPoint.x, -this.upperBody.rotationPoint.y)\r\n                maskCtx.strokeStyle = 'limegreen'\r\n                //ctx.strokeRect(this.upperBody.x, this.upperBody.y, this.upperBody.width, this.upperBody.height)\r\n                maskCtx.drawImage(\r\n                    this.flashAnimation.image,\r\n                    this.upperBody.x + this.upperBody.width,\r\n                    this.upperBody.y + (this.flip ? 0 : 100),\r\n                    this.upperBody.width,\r\n                    this.upperBody.height / 2\r\n                )\r\n                maskCtx.setTransform(1, 0, 0, 1, 0, 0)\r\n            }\r\n        }\r\n    }\r\n    runShootingAnimation() {\r\n        if (this.shootingAnimation.active) {\r\n            if (this.shootingAnimation.frame >= this.shootingAnimation.duration) {\r\n                this.shootingAnimation.frame = 0\r\n                this.shootingAnimation.active = false\r\n            } else {\r\n                this.shootingAnimation.frame++\r\n                this.upperBody.x = this.upperBody.x - this.shootingAnimation.size * this.shootingAnimation.frame\r\n            }\r\n        }\r\n    }\r\n    rotate(clientX, clientY) {\r\n        //const deltaX = this.x + this.upperBody.width / 2 - clientX\r\n        //const deltaY = this.y + this.upperBody.height / 2 - clientY\r\n        this.angle =\r\n            Math.atan2(this.y + this.upperBody.height / 2 - clientY, this.x + this.upperBody.width / 2 - clientX) +\r\n            Math.PI\r\n        if (this.angle > 1.5 && this.angle < 4.7) {\r\n            this.flip = true\r\n        } else {\r\n            this.flip = false\r\n        }\r\n    }\r\n    onClick() {\r\n        audioPlayer.playAudio('gunshot')\r\n        this.flashAnimation.active = true\r\n        this.shootingAnimation.active = true\r\n    }\r\n    setUp() {\r\n        setUpKeyboard(this)\r\n        setUpMouse(this)\r\n    }\r\n}\r\n\r\nexport const loadCharacter = async () => {\r\n    const manifest = await loadManifest('character')\r\n    manifest.lowerBody = {\r\n        ...manifest.lowerBody,\r\n        spriteSheet: await loadImage(manifest.lowerBody.spriteSheetURL)\r\n    }\r\n    manifest.upperBody = {\r\n        ...manifest.upperBody,\r\n        image: await loadImage(manifest.upperBody.imageURL),\r\n        imageFlipped: await loadImage(manifest.upperBody.flippedImageURL)\r\n    }\r\n    manifest.flashImage = await loadImage(manifest.flashImageURL)\r\n    manifest.animations = loadAnimations(manifest.animationsToBeLoaded)\r\n    return new Character(manifest)\r\n}\r\n","import { canvas } from '/src/shared/canvas'\r\nimport { loadImage, loadManifest } from '/src/classes/loaders'\r\n\r\nexport class Scene {\r\n    constructor(manifest) {\r\n        this.manifest = manifest\r\n    }\r\n    draw(ctx) {\r\n        ctx.drawImage(this.manifest.image, 0, 0, canvas.width, canvas.height)\r\n    }\r\n}\r\n\r\nexport const loadScene = async () => {\r\n    const manifest = await loadManifest('scene')\r\n    manifest.image = await loadImage(manifest.mainImageURL)\r\n    return new Scene(manifest)\r\n}\r\n","export function getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max))\r\n}\r\n\r\nexport function randomIntFromRange(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n}\r\n\r\nexport function checkCollision(obj1, obj2) {\r\n    if (\r\n        obj1.x < obj2.x + obj2.width &&\r\n        obj1.x + obj1.width > obj2.x &&\r\n        obj1.y < obj2.y + obj2.height &&\r\n        obj1.y + obj1.height > obj2.y\r\n    ) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n","import { canvas, canvasCenter } from '/src/shared/canvas'\r\nimport { randomIntFromRange } from '/src/shared/helpers'\r\nimport { audioPlayer } from '../AudioPlayer'\r\nimport { loadImage, loadManifest } from './loaders'\r\n\r\nexport class Spider {\r\n    constructor(manifest) {\r\n        const { destination, position, width, height } = manifest\r\n        this.manifest = manifest\r\n        this.height = width\r\n        this.width = height\r\n        this.x = position.x\r\n        this.y = position.y\r\n        this.isShot = false\r\n        this.hasKilledAPlant = false\r\n        this.killer = {}\r\n        this.deltaX = destination.x - this.x\r\n        this.deltaY = destination.y - this.y\r\n        this.angle = Math.atan2(this.deltaY, this.deltaX)\r\n        this.splashAngle = 0\r\n        this.velocityX = Math.cos(this.angle) * 1.0\r\n        this.velocityY = Math.sin(this.angle) * 1.0\r\n        this.direction = this.angle - Math.PI / 2\r\n        this.distance = 0\r\n        this.points = {\r\n            shown: false,\r\n            value: Math.floor(1000 / this.width),\r\n            y: this.y,\r\n            speed: 2,\r\n            multiplier: 1\r\n        }\r\n    }\r\n    draw(ctx) {\r\n        if (!this.isShot && !this.hasKilledAPlant) {\r\n            this.distance += 2\r\n            ctx.translate(this.x + this.width / 2, this.y + this.height / 2)\r\n            ctx.rotate(this.direction)\r\n            ctx.translate(-this.x - this.width / 2, -this.y - this.height / 2)\r\n            this.getFrame(ctx, `spider-${Math.floor(this.distance / 20) % this.manifest.spriteMap.size}`)\r\n            ctx.setTransform(1, 0, 0, 1, 0, 0)\r\n            this.checkCollision()\r\n        } else if (this.hasKilledAPlant) {\r\n        } else {\r\n            ctx.translate(this.x + this.width / 2, this.y + this.height / 2)\r\n            ctx.rotate(-this.splashAngle + Math.PI)\r\n            ctx.translate(-this.x - this.width / 2, -this.y - this.height / 2)\r\n            ctx.drawImage(\r\n                this.manifest.splashImage,\r\n                this.x - 10,\r\n                this.y - this.height,\r\n                this.width + 20,\r\n                this.height * 2\r\n            )\r\n            ctx.setTransform(1, 0, 0, 1, 0, 0)\r\n            if (this.points.shown) {\r\n                this.drawPoints(ctx)\r\n            }\r\n        }\r\n    }\r\n    checkCollision() {\r\n        this.manifest.plants.forEach(plant => {\r\n            if (\r\n                plant.plantBoundingRect.x < this.x + this.width &&\r\n                plant.plantBoundingRect.x + plant.plantBoundingRect.width > this.x &&\r\n                plant.plantBoundingRect.y < this.y + this.height &&\r\n                plant.plantBoundingRect.y + plant.plantBoundingRect.height > this.y\r\n            ) {\r\n                plant.shrink()\r\n                this.hasKilledAPlant = true\r\n                window.game.state.spidersKilled += 1\r\n                if (\r\n                    window.game.state.spidersKilled ===\r\n                    window.game.config.levels[window.game.state.level].numberOfSpiders\r\n                ) {\r\n                    window.game.state.level++\r\n                }\r\n            }\r\n        })\r\n    }\r\n    drawPoints(ctx) {\r\n        this.points.y -= this.points.speed\r\n        ctx.font = `${this.width - 10}px Anton`\r\n        ctx.fillStyle = 'white'\r\n        ctx.textAlign = 'center'\r\n        ctx.fillText(Math.floor(this.points.value * this.points.multiplier), this.x + this.width / 2, this.points.y)\r\n        if (this.points.y < 0) {\r\n            this.points.shown = false\r\n        }\r\n    }\r\n    getFrame(ctx, name) {\r\n        const frame = this.manifest.spriteMap.get(name)\r\n        if (frame) {\r\n            ctx.drawImage(\r\n                this.manifest.image,\r\n                frame.x,\r\n                frame.y,\r\n                frame.width,\r\n                frame.height,\r\n                (this.x += this.velocityX * 1),\r\n                (this.y += this.velocityY * 1),\r\n                this.width,\r\n                this.height\r\n            )\r\n        }\r\n    }\r\n    onClick() {\r\n        window.game.state.streak += 1\r\n        window.game.state.spidersKilledTotal += 1\r\n        window.game.state.spidersKilled += 1\r\n        this.points.multiplier = 1 + window.game.state.streak * 0.1\r\n        window.game.state.score += Math.floor(this.points.value * this.points.multiplier)\r\n        if (window.game.state.streak > window.game.state.biggestStreak) {\r\n            window.game.state.biggestStreak = window.game.state.streak\r\n        }\r\n        audioPlayer.playAudio('splash')\r\n        this.isShot = true\r\n        this.points.shown = true\r\n        this.points.y = this.y\r\n        this.killer = { x: this.manifest.character.upperBody.x, y: this.manifest.character.upperBody.y }\r\n        const deltaX = this.x - (this.killer.x + this.manifest.character.upperBody.width / 2)\r\n        const deltaY = this.y - (this.killer.y + 100)\r\n        this.splashAngle = Math.atan2(deltaX, deltaY)\r\n        if (window.game.state.spidersKilled === window.game.config.levels[window.game.state.level].numberOfSpiders) {\r\n            window.game.state.level++\r\n        }\r\n    }\r\n}\r\n\r\nexport class SpiderFactory {\r\n    constructor(manifest) {\r\n        this.manifest = manifest\r\n    }\r\n    createSpiders(numberOfSpiders, character, plants) {\r\n        this.manifest.character = character\r\n        this.manifest.plants = plants\r\n        let spiders = []\r\n        for (let i = 0; i < numberOfSpiders; i++) {\r\n            this.manifest.position = {\r\n                x: randomIntFromRange(-200, canvas.width + 200),\r\n                y: randomIntFromRange(-200, 0)\r\n            }\r\n            const size = randomIntFromRange(25, 80)\r\n            this.manifest.width = size\r\n            this.manifest.height = size\r\n\r\n            //spider will pick a random plant and attack it\r\n            const plant = plants[randomIntFromRange(0, plants.length - 1)]\r\n            this.manifest.destination = {\r\n                x: plant.x + plant.width / 2,\r\n                y: plant.y\r\n            }\r\n            spiders.push(new Spider(this.manifest))\r\n        }\r\n        return spiders\r\n    }\r\n}\r\n\r\nexport const loadSpiderFactory = async () => {\r\n    const manifest = await loadManifest('spider')\r\n    manifest.image = await loadImage(manifest.mainImageURL)\r\n    manifest.splashImage = await loadImage(manifest.splashImageURL)\r\n    const spriteMap = new Map()\r\n    manifest.frames.forEach(frame => {\r\n        spriteMap.set(frame.name, frame.rect)\r\n    })\r\n    manifest.spriteMap = spriteMap\r\n    return new SpiderFactory(manifest)\r\n}\r\n\r\ndocument.querySelectorAll('audio').forEach(function (audioElement) {\r\n    if (audioElement.muted) {\r\n        audioElement.muted = false\r\n    } else {\r\n        audioElement.muted = true\r\n    }\r\n})\r\n","import { audioPlayer } from '../AudioPlayer'\r\n\r\n// file for interaction between html elements and canvas\r\nexport const addEventListeners = plants => {\r\n    document.querySelectorAll('.seedButton').forEach(el => {\r\n        el.addEventListener('click', ({ target }) => {\r\n            plants[target.dataset.id].plantSeed()\r\n        })\r\n    })\r\n    document.querySelector('#mute-button').addEventListener('click', function () {\r\n        this.classList.toggle('mute')\r\n        audioPlayer.toggleMuteAudio()\r\n    })\r\n}\r\n\r\nexport const showGameOver = () => {\r\n    document.querySelector('#gameOverScreen').classList.remove('hidden')\r\n    document.querySelector('#gameOverScreen').innerHTML += `\r\n        <div>\r\n            <h2>Spiders killed: ${window.game.state.spidersKilledTotal}</h2>\r\n            <h2>Points from spiders: ${window.game.state.score}</h2>\r\n            <h2>Highest killstreak: ${window.game.state.biggestStreak}</h2>\r\n            <h2>Points from plants: ${window.game.plants.reduce((acc, plant) => {\r\n                return acc + plant.size * 1000\r\n            }, 0)}</h2>\r\n        </div>\r\n    `\r\n}\r\n\r\nexport const updateLevel = () => {\r\n    if (window.game.state.level >= 0) {\r\n        document.querySelector('#level').innerText = window.game.state.level + 1\r\n        document.querySelector('#level').classList.remove('hidden')\r\n    }\r\n}\r\n\r\nexport const updateScore = () => {\r\n    document.querySelector('#score').innerText = window.game.state.score\r\n}\r\n\r\nexport const updateStreak = () => {\r\n    const streak = document.querySelector('#streak')\r\n    const streakCont = document.querySelector('#streak-container')\r\n    streak.innerText = Math.floor((1 + window.game.state.streak * 0.1) * 10) / 10\r\n    if (window.game.state.streak !== 0) {\r\n        streakCont.classList.remove('hidden')\r\n        streak.classList.remove('streak-animation')\r\n        streak.offsetWidth\r\n        streak.classList.add('streak-animation')\r\n        //streak.style.color = '#' + (((1 << 24) * Math.random()) | 0).toString(16)\r\n    } else {\r\n        streakCont.classList.add('hidden')\r\n    }\r\n}\r\n\r\nexport const hideLoadingScreen = () => {\r\n    document.querySelector('#loadingScreen').classList.add('hidden')\r\n}\r\n","import { groundY } from '/src/shared/canvas'\r\nimport { canvas } from '/src/shared/canvas'\r\nimport { addEventListeners } from '/src/shared/UI'\r\nimport { loadImage, loadManifest } from '/src/classes/loaders'\r\n\r\nexport class PlantFactory {\r\n    constructor(manifest) {\r\n        this.manifest = manifest\r\n    }\r\n    createPlants(numberOfPlants) {\r\n        const { width, height, image, loadedPlantImages, potMargin, plantSizes } = this.manifest\r\n        const plants = []\r\n        const widthSum = width * numberOfPlants + potMargin * (numberOfPlants - 1)\r\n        const offset = (canvas.width - widthSum) / 2\r\n        //plantSizes.reduce((acc, b) => acc + b.width, 0)\r\n\r\n        for (let i = 0; i < numberOfPlants; i++) {\r\n            plants.push(\r\n                new Plant(\r\n                    offset + (width + (i === numberOfPlants ? 0 : potMargin)) * i,\r\n                    groundY - height,\r\n                    plantSizes,\r\n                    image,\r\n                    loadedPlantImages,\r\n                    i\r\n                )\r\n            )\r\n        }\r\n        addEventListeners(plants)\r\n        return plants\r\n    }\r\n}\r\n\r\nexport class Plant {\r\n    constructor(positionX, positionY, plantSizes, image, plantImages, id) {\r\n        this.id = id\r\n        this.x = positionX\r\n        this.y = positionY - 15\r\n        this.size = 0\r\n        this.plantSizes = plantSizes\r\n        this.planted = false\r\n        this.showSeed = true\r\n        this.plantImages = plantImages\r\n        this.width = 170\r\n        this.height = 120\r\n        this.potCenter = {\r\n            x: this.x + this.width / 2,\r\n            y: this.y + this.height / 2\r\n        }\r\n        this.image = image\r\n        this.timeToShowSeedButton = 1\r\n        this.activePlant = plantSizes[this.size]\r\n        this.activePlantImage = plantImages[this.size]\r\n        this.plantBoundingRect = {\r\n            x: this.potCenter.x - this.activePlant.width / 2,\r\n            y: this.y - this.activePlant.height,\r\n            width: this.activePlant.width,\r\n            height: this.activePlant.height\r\n        }\r\n        this.createSeedButton()\r\n    }\r\n    draw(ctx) {\r\n        ctx.drawImage(this.image, this.x, this.y, this.width, this.height)\r\n        if (this.planted) {\r\n            ctx.drawImage(\r\n                this.activePlantImage,\r\n                this.plantBoundingRect.x,\r\n                this.plantBoundingRect.y,\r\n                this.plantBoundingRect.width,\r\n                this.plantBoundingRect.height\r\n            )\r\n        }\r\n    }\r\n    grow() {\r\n        if (this.size < this.plantImages.length - 1 && this.planted) {\r\n            this.size++\r\n            this.activePlant = this.plantSizes[this.size]\r\n            this.activePlantImage = this.plantImages[this.size]\r\n            this.plantBoundingRect = {\r\n                x: this.potCenter.x - this.activePlant.width / 2,\r\n                y: this.y - this.activePlant.height,\r\n                width: this.activePlant.width,\r\n                height: this.activePlant.height\r\n            }\r\n        }\r\n    }\r\n    shrink() {\r\n        if (this.size > 0 && this.planted) {\r\n            this.size--\r\n            this.activePlant = this.plantSizes[this.size]\r\n            this.activePlantImage = this.plantImages[this.size]\r\n            this.plantBoundingRect = {\r\n                x: this.potCenter.x - this.activePlant.width / 2,\r\n                y: this.y - this.activePlant.height,\r\n                width: this.activePlant.width,\r\n                height: this.activePlant.height\r\n            }\r\n        } else {\r\n            this.size = -1\r\n            this.planted = false\r\n        }\r\n    }\r\n    onClick() {\r\n        this.grow()\r\n    }\r\n    plantSeed() {\r\n        window.game.state.seedsPlanted += 1\r\n        this.planted = true\r\n        document.querySelector(`.seedButton[data-id=\"${this.id}\"]`).outerHTML = ''\r\n    }\r\n    showSeedButton() {\r\n        document.querySelector(`.seedButton[data-id=\"${this.id}\"]`).classList.add('active')\r\n    }\r\n    createSeedButton() {\r\n        overlay.innerHTML += `\r\n        <div \r\n            class=\"seedButton\"\r\n            data-id=\"${this.id}\"\r\n            style=\"left: ${this.potCenter.x - 40}px; top: ${this.potCenter.y - 160}px;\" \r\n        >\r\n            <div class=\"seedButton__image\" data-id=\"${this.id}\">\r\n            </div>\r\n        </div>\r\n        `\r\n    }\r\n}\r\n\r\nexport const loadPlantFactory = async () => {\r\n    const manifest = await loadManifest('plant')\r\n    manifest.image = await loadImage(manifest.mainImageURL)\r\n    manifest.loadedPlantImages = []\r\n    Promise.all([\r\n        loadImage(manifest.plantImages[0]),\r\n        loadImage(manifest.plantImages[1]),\r\n        loadImage(manifest.plantImages[2]),\r\n        loadImage(manifest.plantImages[3])\r\n    ]).then(async plants => {\r\n        manifest.loadedPlantImages = await plants\r\n    })\r\n    return new PlantFactory(manifest)\r\n}\r\n","import { canvas, maskCtx } from '/src/shared/canvas'\r\nimport { audioPlayer } from '../AudioPlayer'\r\nimport { loadImage, loadManifest } from './loaders'\r\n\r\nexport class Light {\r\n    constructor(id, positionX, positionY, width, height, image, color, lightWidth, turnOn, numberOfLights) {\r\n        this.id = id\r\n        this.width = width\r\n        this.height = height\r\n        this.x = positionX\r\n        this.y = positionY\r\n        this.lampCenter = {\r\n            x: this.x + this.width / 2,\r\n            y: this.y + this.height / 2\r\n        }\r\n        this.turnedOn = false\r\n        this.color = color\r\n        this.lightWidth = lightWidth\r\n        this.image = image\r\n        this.offset = 10\r\n        this.isShot = false\r\n        this.perspective = 40\r\n        this.turnOn = turnOn\r\n        this.numberOfLights = numberOfLights\r\n    }\r\n    drawLight(ctx) {\r\n        if (this.turnedOn) {\r\n            ctx.beginPath()\r\n            //top left\r\n            ctx.moveTo(this.x + this.offset, this.y + this.height)\r\n            //bottom left\r\n            if (this.id == 0) {\r\n                ctx.lineTo(this.x - this.lightWidth, canvas.height - 65)\r\n                ctx.lineTo(this.x - this.lightWidth - this.perspective, canvas.height)\r\n            } else {\r\n                ctx.lineTo(this.x - this.lightWidth, canvas.height)\r\n            }\r\n            //bottom right\r\n            if (this.id == this.numberOfLights - 1) {\r\n                ctx.lineTo(this.x + +this.width + this.lightWidth + this.perspective, canvas.height)\r\n                ctx.lineTo(this.x + this.width + this.lightWidth, canvas.height - 65)\r\n            } else {\r\n                ctx.lineTo(this.x + this.width + this.lightWidth, canvas.height)\r\n            }\r\n            //top right\r\n            ctx.lineTo(this.x + this.width - this.offset, this.y + this.height)\r\n            ctx.closePath()\r\n            ctx.fillStyle = this.color\r\n            ctx.fill()\r\n        }\r\n    }\r\n    drawBody(ctx) {\r\n        ctx.drawImage(this.image, this.x, this.y, this.width, this.height)\r\n    }\r\n    draw(ctx) {\r\n        this.drawBody(ctx)\r\n        this.drawLight(maskCtx)\r\n    }\r\n    onClick() {\r\n        if (!this.isShot) {\r\n            audioPlayer.playAudio('glass')\r\n        }\r\n        this.isShot = true\r\n    }\r\n}\r\n\r\nexport class LightFactory {\r\n    constructor(manifest) {\r\n        this.manifest = manifest\r\n    }\r\n\r\n    createLights(numberOfLights, delay) {\r\n        const { width, height, image, color, lightWidth, lightMargin } = this.manifest\r\n        const lights = []\r\n        const widthSum = width * numberOfLights + lightMargin * (numberOfLights - 1)\r\n        const offset = (canvas.width - widthSum) / 2\r\n\r\n        for (let i = 0; i < numberOfLights; i++) {\r\n            const turnOn = i + delay\r\n            const light = new Light(\r\n                i,\r\n                offset + (width + (i === numberOfLights ? 0 : lightMargin)) * i,\r\n                0,\r\n                width,\r\n                height,\r\n                image,\r\n                color,\r\n                lightWidth,\r\n                turnOn,\r\n                numberOfLights\r\n            )\r\n            lights.push(light)\r\n        }\r\n\r\n        return lights\r\n    }\r\n}\r\n\r\nexport const loadLightFactory = async () => {\r\n    const manifest = await loadManifest('light')\r\n    manifest.image = await loadImage(manifest.mainImageURL)\r\n    return new LightFactory(manifest)\r\n}\r\n","export class Timer {\r\n    constructor() {\r\n        this.startTime = 0\r\n        this.timeElapsed = 0\r\n    }\r\n    start() {\r\n        this.startTime = new Date()\r\n    }\r\n    logTimeElapsed() {\r\n        let timeDiff = (new Date() - this.startTime) / 1000\r\n        let seconds = Math.round(timeDiff)\r\n        if (this.timeElapsed != seconds) {\r\n            this.timeElapsed = seconds\r\n            //console.log(this.timeElapsed)\r\n        }\r\n    }\r\n    getTimeElapsed() {\r\n        return this.timeElapsed\r\n    }\r\n}\r\n","export * from './character'\r\nexport * from './scene'\r\nexport * from './spider'\r\nexport * from './plant'\r\nexport * from './light'\r\nexport * from './loaders'\r\nexport * from './timer'\r\n","export const checkTarget = ({ clientX, clientY }, targets, callback) => {\r\n    callback(\r\n        targets.find(\r\n            target =>\r\n                !target.isShot &&\r\n                clientX > target.x &&\r\n                clientX < target.x + target.width &&\r\n                clientY > target.y &&\r\n                clientY < target.y + target.height\r\n        )\r\n    )\r\n}\r\n","import { ctx, canvas, mask, maskCtx } from '/src/shared/canvas'\r\nimport { loadCharacter, loadScene, loadLightFactory, loadSpiderFactory, loadPlantFactory, Timer } from './classes'\r\nimport { randomIntFromRange } from '/src/shared/helpers'\r\nimport { showGameOver, updateLevel, hideLoadingScreen, updateScore } from '/src/shared/UI'\r\nimport { audioPlayer } from './AudioPlayer'\r\n\r\nimport { checkTarget } from '/src/clickHandler'\r\nimport { updateStreak } from '/src/shared/UI'\r\n\r\nexport const GameLoop = async config => {\r\n    window.game = {\r\n        config: config,\r\n        state: {\r\n            seedsPlanted: 0,\r\n            seedsShown: false,\r\n            spidersKilled: 0,\r\n            spidersKilledTotal: 0,\r\n            level: -1,\r\n            currentLevel: -1,\r\n            gameOver: false,\r\n            levelUpdated: false,\r\n            score: 0,\r\n            streak: 0,\r\n            biggestStreak: 0\r\n        }\r\n    }\r\n    console.log('1')\r\n\r\n    const timer = new Timer()\r\n    const character = await loadCharacter()\r\n    const scene = await loadScene()\r\n    const plantFactory = await loadPlantFactory()\r\n    const lightFactory = await loadLightFactory()\r\n    const spiderFactory = await loadSpiderFactory()\r\n    await audioPlayer.loadAllSounds()\r\n\r\n    audioPlayer.playAudio('music')\r\n\r\n    const plants = plantFactory.createPlants(config.settings.plants.numberOfPots)\r\n    const lamps = lightFactory.createLights(config.settings.lights.numberOfLights, config.timing.startLights)\r\n    let spiders = []\r\n\r\n    //character.epicEntrance().then(() => {})\r\n\r\n    canvas.addEventListener('mousedown', e => {\r\n        checkTarget(e, [...spiders], entity => {\r\n            if (entity) entity.onClick()\r\n            else {\r\n                window.game.state.streak = 0\r\n            }\r\n            updateScore()\r\n            updateStreak(character.streak)\r\n        })\r\n        checkTarget(e, [...lamps, ...plants], entity => {\r\n            if (entity) entity.onClick()\r\n        })\r\n    })\r\n\r\n    const nextLevel = () => {\r\n        window.game.state.currentLevel = window.game.state.level\r\n        window.game.state.levelUpdated = false\r\n        window.game.state.spidersKilled = 0\r\n        spiders = []\r\n    }\r\n\r\n    timer.start()\r\n    console.log('2')\r\n\r\n    // forcing loading screen to see the amazingness\r\n    //setTimeout(() => hideLoadingScreen(), 2000)\r\n    hideLoadingScreen()\r\n\r\n    const gameLoop = () => {\r\n        ctx.globalCompositeOperation = 'normal'\r\n\r\n        scene.draw(ctx)\r\n\r\n        character.move()\r\n\r\n        spiders.forEach(spider => {\r\n            spider.draw(ctx)\r\n        })\r\n\r\n        if (!window.game.state.levelUpdated) {\r\n            window.game.state.levelUpdated = true\r\n            updateLevel()\r\n        }\r\n\r\n        if (config.timing.showSeeds == timer.getTimeElapsed()) {\r\n            window.game.state.level = 0\r\n            updateLevel()\r\n        }\r\n\r\n        if (window.game.state.level === 0 && window.game.state.currentLevel !== window.game.state.level) {\r\n            if (window.game.state.seedsPlanted == plants.length) {\r\n                if (spiders.length == 0) {\r\n                    spiders = spiderFactory.createSpiders(\r\n                        window.game.config.levels[0].numberOfSpiders,\r\n                        character,\r\n                        plants\r\n                    )\r\n                }\r\n            }\r\n            if (!window.game.state.seedsShown) {\r\n                window.game.state.seedsShown = true\r\n                plants.forEach(plant => {\r\n                    if (plant.showSeed) {\r\n                        plant.showSeedButton()\r\n                        plant.showSeed = false\r\n                    }\r\n                })\r\n            }\r\n        } else if (window.game.state.level === 1 && window.game.state.currentLevel !== window.game.state.level) {\r\n            nextLevel()\r\n            plants.forEach(plant => {\r\n                plant.grow()\r\n            })\r\n            //window.game.state.gameOver = true\r\n            window.game.plants = plants\r\n            spiders = spiderFactory.createSpiders(window.game.config.levels[1].numberOfSpiders, character, plants)\r\n        } else if (window.game.state.level === 2 && window.game.state.currentLevel !== window.game.state.level) {\r\n            nextLevel()\r\n            plants.forEach(plant => {\r\n                plant.grow()\r\n            })\r\n            spiders = spiderFactory.createSpiders(window.game.config.levels[2].numberOfSpiders, character, plants)\r\n        } else if (window.game.state.level === 3 && window.game.state.currentLevel !== window.game.state.level) {\r\n            nextLevel()\r\n            plants.forEach(plant => {\r\n                plant.grow()\r\n            })\r\n            spiders = spiderFactory.createSpiders(window.game.config.levels[3].numberOfSpiders, character, plants)\r\n        } else if (window.game.state.level === 4 && window.game.state.currentLevel !== window.game.state.level) {\r\n            nextLevel()\r\n            window.game.state.gameOver = true\r\n            window.game.plants = plants\r\n        }\r\n\r\n        plants.forEach(plant => {\r\n            plant.draw(ctx)\r\n        })\r\n\r\n        character.draw(ctx)\r\n\r\n        // drawing a black mask over the whole screen\r\n        maskCtx.fillStyle = 'rgb(68, 68, 68)'\r\n        //maskCtx.fillStyle = \"rgb(45, 45, 45)\";\r\n        maskCtx.fillRect(0, 0, mask.width, mask.height)\r\n\r\n        character.drawFlash(maskCtx)\r\n        // adding \"white\" light onto the mask\r\n        lamps.forEach(lamp => {\r\n            if (!lamp.isShot) {\r\n                if (!lamp.turnedOn && lamp.turnOn == timer.getTimeElapsed()) {\r\n                    lamp.turnedOn = true\r\n                }\r\n                lamp.drawBody(ctx)\r\n                lamp.drawLight(maskCtx)\r\n            } else {\r\n                lamp.drawBody(ctx)\r\n            }\r\n        })\r\n\r\n        // multiply the mask with the underlying canvas\r\n        ctx.globalCompositeOperation = 'multiply'\r\n        ctx.drawImage(mask, 0, 0)\r\n        timer.logTimeElapsed()\r\n\r\n        if (!window.game.state.gameOver) {\r\n            window.requestAnimationFrame(gameLoop)\r\n        } else {\r\n            showGameOver()\r\n        }\r\n    }\r\n\r\n    return () => {\r\n        //setInterval(gameLoop, 1000 / 60)\r\n        window.requestAnimationFrame(gameLoop)\r\n    }\r\n}\r\n","module.exports={name:\"Plants and Spiders\",settings:{plants:{numberOfPots:3},lights:{numberOfLights:3}},timing:{showSeeds:5,startLights:2,delayBetweenLights:1},levels:[{id:0,numberOfSpiders:30},{id:1,numberOfSpiders:15},{id:2,numberOfSpiders:20},{id:3,numberOfSpiders:25}]};","import { GameLoop } from './gameLoop'\r\nimport config from '/static/manifests/gameConfig.json'\r\nimport './styles/style.scss'\r\n\r\nconst titleScreen = document.querySelector('#titleScreen')\r\nconst tutorialScreen = document.querySelector('#tutorialScreen')\r\ntitleScreen.addEventListener('click', () => {\r\n    titleScreen.classList.add('hidden')\r\n\r\n    tutorialScreen.addEventListener('click', () => {\r\n        tutorialScreen.classList.add('hidden')\r\n\r\n        GameLoop(config).then(startGame => {\r\n            console.log('All systems are go!')\r\n            startGame()\r\n        })\r\n    })\r\n})\r\n\r\n/*features:\r\n- walk up to a plant to grow\r\n- shadows undercharacters\r\n- \r\n*/\r\n\r\n/* \r\n    GAME IDEA:\r\n    - player starts with planting plants\r\n    - spiders are coming towards your plants and want to eat them\r\n    - protect plants against spiders by shooting them\r\n    - plants grow every round\r\n    - spider touching a plant will cause the plant losing one growth cycle thus becoming smaller\r\n    - there will be more spiders and they will be faster or smaller each round (making them harder to hit)\r\n    - each spider picks one of the plants to attack at the beginning of his journey\r\n    - you get points subtracted every time you miss a shot\r\n    - collect plants at the end after 4 rounds, your score depends on how much of your plants is left\r\n    - best achievable score is when all plants are fully grown after 4 rounds and you have missed no shots\r\n*/\r\n"]}