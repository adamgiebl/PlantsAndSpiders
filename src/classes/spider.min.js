import{canvas,canvasCenter}from"shared/canvas";import{randomIntFromRange}from"shared/helpers";import{audioPlayer}from"../AudioPlayer";import{loadImage,loadManifest}from"./loaders";export class Spider{constructor(manifest){const{destination:destination,position:position}=manifest;this.manifest=manifest,this.height=50,this.width=50,this.x=position.x,this.y=position.y,this.isShot=!1,this.killer={},this.deltaX=destination.x-this.x,this.deltaY=destination.y-this.y,this.angle=Math.atan2(this.deltaY,this.deltaX),this.splashAngle=0,this.velocityX=1*Math.cos(this.angle),this.velocityY=1*Math.sin(this.angle),this.direction=this.angle-Math.PI/2,this.distance=0}draw(ctx){this.isShot?(ctx.translate(this.x+this.width/2,this.y+this.height/2),ctx.rotate(-this.splashAngle+Math.PI),ctx.translate(-this.x-this.width/2,-this.y-this.height/2),ctx.drawImage(this.manifest.splashImage,this.x-10,this.y-this.height,this.width+20,2*this.height),ctx.setTransform(1,0,0,1,0,0)):(this.distance+=2,ctx.translate(this.x+this.width/2,this.y+this.height/2),ctx.rotate(this.direction),ctx.translate(-this.x-this.width/2,-this.y-this.height/2),this.getFrame(ctx,`spider-${Math.floor(this.distance/20)%this.manifest.spriteMap.size}`),ctx.setTransform(1,0,0,1,0,0))}checkCollision(){}getFrame(ctx,name){const frame=this.manifest.spriteMap.get(name);frame&&ctx.drawImage(this.manifest.image,frame.x,frame.y,frame.width,frame.height,this.x+=1*this.velocityX,this.y+=1*this.velocityY,this.width,this.height)}onClick(){audioPlayer.playAudio("splash"),this.isShot=!0,this.killer={x:this.manifest.character.upperBody.x,y:this.manifest.character.upperBody.y};const deltaX=this.x-(this.killer.x+this.manifest.character.upperBody.width/2),deltaY=this.y-(this.killer.y+100);this.splashAngle=Math.atan2(deltaX,deltaY)}}export class SpiderFactory{constructor(manifest){this.manifest=manifest}createSpiders(numberOfSpiders,character){this.manifest.character=character;let spiders=[];for(let i=0;i<numberOfSpiders;i++)this.manifest.position={x:randomIntFromRange(-200,canvas.width+200),y:randomIntFromRange(-200,0)},this.manifest.destination={x:randomIntFromRange(canvasCenter.x-200,canvasCenter.x+200),y:canvas.height},spiders.push(new Spider(this.manifest));return spiders}}export const loadSpiderFactory=async()=>{const manifest=await loadManifest("spider");manifest.image=await loadImage(manifest.mainImageURL),manifest.splashImage=await loadImage(manifest.splashImageURL);const spriteMap=new Map;return manifest.frames.forEach(frame=>{spriteMap.set(frame.name,frame.rect)}),manifest.spriteMap=spriteMap,new SpiderFactory(manifest)};