{"version":3,"sources":["src/shared/canvas.js","src/KeyboardHandler.js","src/input.js","src/AudioPlayer.js","src/classes/loaders.js","src/classes/character.js","src/classes/scene.js","src/shared/helpers.js","src/classes/spider.js","src/shared/UI.js","src/classes/plant.js","src/classes/light.js","src/classes/timer.js","src/classes/index.js","src/clickHandler.js","src/gameLoop.js","static/manifests/gameConfig.json","src/main.js"],"names":["canvas","document","querySelector","ctx","getContext","font","width","innerWidth","height","innerHeight","mask","createElement","maskCtx","groundPositionX","groundHeight","groundY","resizeCanvas","window","location","reload","canvasCenter","x","y","addEventListener","KeyboardHandler","constructor","keyStates","Map","keyMap","addMapping","code","callback","set","handleEvent","event","has","preventDefault","keyState","type","get","listenTo","forEach","eventName","setUpKeyboard","character","keyboard","direction","right","left","jumping","setUpMouse","clientX","clientY","rotate","e","onClick","AudioPlayer","audioContext","AudioContext","audioBuffers","muted","gainNodeFx","createGain","gainNodeMusic","loadAudio","src","fetch","then","response","arrayBuffer","decodeAudioData","addAudio","name","buffer","playAudio","source","createBufferSource","connect","destination","start","playMusic","loop","changeVolume","value","gain","loadAllSounds","Promise","all","audioPlayer","gunshotSrc","splashSrc","glassShatterSrc","musicSrc","seedSrc","plantSrc","spiderBiteSrc","gunshot","splash","glass","music","seed","plant","spiderBite","loadImage","url","resolve","image","Image","loadManifest","res","json","loadAnimations","animations","animationsMap","animation","spriteMap","frames","frame","rect","Character","manifest","isOnGround","deltaX","deltaY","angle","velocityX","velocityY","gravity","flip","shot","distance","ready","streak","highestStreak","lowerBody","runningAnimation","jumpingAnimation","upperBody","flashAnimation","active","duration","flashImage","shootingAnimation","size","setUp","draw","rotationPoint","strokeStyle","getFrame","Math","floor","translate","runShootingAnimation","drawImage","imageFlipped","setTransform","fillStyle","move","spriteSheet","drawFlash","fillRect","atan2","PI","loadCharacter","spriteSheetURL","imageURL","flippedImageURL","flashImageURL","animationsToBeLoaded","Scene","loadScene","mainImageURL","getRandomInt","max","random","randomIntFromRange","min","checkCollision","obj1","obj2","Spider","position","speed","isShot","hasKilledAPlant","killer","splashAngle","cos","sin","points","shown","multiplier","splashImage","drawPoints","plants","plantBoundingRect","shrink","game","state","spidersKilled","levels","level","numberOfSpiders","reduce","acc","length","gameOver","textAlign","fillText","spidersKilledTotal","score","biggestStreak","setTimeout","SpiderFactory","createSpiders","config","settings","spiders","difficulty","i","push","loadSpiderFactory","splashImageURL","querySelectorAll","audioElement","addEventListeners","classList","remove","paused","add","target","input","shouldRestart","showGameOver","scorePlants","innerText","toLowerCase","dataset","diff","updateLevel","updateScore","updateStreak","streakCont","offsetWidth","hideLoadingScreen","PlantFactory","createPlants","numberOfPlants","loadedPlantImages","potMargin","plantSizes","widthSum","offset","Plant","positionX","positionY","plantImages","id","planted","showSeed","potCenter","timeToShowSeedButton","activePlant","activePlantImage","createSeedButton","grow","plantSeed","seedsPlanted","removeEventListener","showSeedButton","bind","overlay","innerHTML","loadPlantFactory","Light","color","lightWidth","turnOn","numberOfLights","lampCenter","turnedOn","perspective","drawLight","beginPath","moveTo","lineTo","closePath","fill","drawBody","LightFactory","createLights","delay","lightMargin","lights","light","loadLightFactory","Timer","startTime","timeElapsed","Date","logTimeElapsed","timeDiff","seconds","round","getTimeElapsed","checkTarget","targets","find","defaultState","seedsShown","currentLevel","levelUpdated","defaultDifficulty","GameLoop","JSON","parse","stringify","timer","scene","plantFactory","lightFactory","spiderFactory","numberOfPots","lamps","timing","startLights","entity","nextLevel","gameLoop","requestAnimationFrame","globalCompositeOperation","spider","showSeeds","lamp","el","outerHTML","module","exports","EASY","NORMAL","HARD","delayBetweenLights","titleScreen","tutorialScreen","startGame","console","log"],"mappings":"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","file":"main.61a07971.js","sourceRoot":"..","sourcesContent":["export const canvas = document.querySelector('canvas')\r\nexport const ctx = canvas.getContext('2d')\r\nctx.font = '30px Anton'\r\ncanvas.width = innerWidth\r\ncanvas.height = innerHeight\r\nexport const mask = document.createElement('canvas')\r\nexport const maskCtx = mask.getContext('2d')\r\nmask.width = innerWidth\r\nmask.height = innerHeight\r\n\r\nexport const groundPositionX = 0\r\n\r\nexport const groundHeight = 15\r\n\r\nexport let groundY = canvas.height - groundHeight\r\n\r\nconst resizeCanvas = () => {\r\n    window.location.reload()\r\n    /*canvas.width = innerWidth\r\n    canvas.height = innerHeight\r\n    mask.width = innerWidth\r\n    mask.height = innerHeight\r\n    groundY = canvas.height - groundHeight*/\r\n}\r\n\r\nexport const canvasCenter = { x: canvas.width / 2, y: canvas.height / 2 }\r\n\r\nwindow.addEventListener('resize', resizeCanvas)\r\n","export default class KeyboardHandler {\r\n    constructor() {\r\n        // Holds the current state of a given key\r\n        this.keyStates = new Map()\r\n\r\n        // Holds the callback functions for a key code\r\n        this.keyMap = new Map()\r\n    }\r\n\r\n    addMapping(code, callback) {\r\n        this.keyMap.set(code, callback)\r\n    }\r\n\r\n    handleEvent(event) {\r\n        const { code } = event\r\n\r\n        if (!this.keyMap.has(code)) {\r\n            return\r\n        }\r\n\r\n        event.preventDefault()\r\n\r\n        const keyState = event.type === 'keydown' ? true : false\r\n\r\n        if (this.keyStates.get(code) === keyState) {\r\n            return\r\n        }\r\n\r\n        this.keyStates.set(code, keyState)\r\n\r\n        this.keyMap.get(code)(keyState)\r\n    }\r\n\r\n    listenTo(window) {\r\n        ;['keydown', 'keyup'].forEach(eventName => {\r\n            window.addEventListener(eventName, event => {\r\n                this.handleEvent(event)\r\n            })\r\n        })\r\n    }\r\n}\r\n","import KeyboardHandler from './KeyboardHandler'\r\nimport { canvas } from '/src/shared/canvas'\r\n\r\nexport const setUpKeyboard = character => {\r\n    const keyboard = new KeyboardHandler()\r\n\r\n    keyboard.addMapping('KeyD', keyState => {\r\n        character.direction.right = keyState\r\n    })\r\n\r\n    keyboard.addMapping('KeyA', keyState => {\r\n        character.direction.left = keyState\r\n    })\r\n\r\n    keyboard.addMapping('Space', keyState => {\r\n        character.direction.jumping = keyState\r\n    })\r\n\r\n    keyboard.listenTo(window)\r\n}\r\n\r\nexport const setUpMouse = character => {\r\n    canvas.addEventListener('mousemove', ({ clientX, clientY }) => {\r\n        character.rotate(clientX, clientY)\r\n    })\r\n    canvas.addEventListener('click', e => {\r\n        character.onClick()\r\n    })\r\n}\r\n","import gunshotSrc from '/static/sounds/ShotgunQuieter.mp3'\r\nimport splashSrc from '/static/sounds/Splash.mp3'\r\nimport glassShatterSrc from '/static/sounds/glass.mp3'\r\nimport musicSrc from '/static/sounds/reggae.mp3'\r\nimport seedSrc from '/static/sounds/seed.mp3'\r\nimport plantSrc from '/static/sounds/plant.mp3'\r\nimport spiderBiteSrc from '/static/sounds/spiderBite.mp3'\r\n\r\nexport class AudioPlayer {\r\n    constructor() {\r\n        this.audioContext = new AudioContext()\r\n        this.audioBuffers = new Map()\r\n        this.muted = false\r\n        this.gainNodeFx = this.audioContext.createGain()\r\n        this.gainNodeMusic = this.audioContext.createGain()\r\n    }\r\n    loadAudio(src) {\r\n        return fetch(src)\r\n            .then(response => response.arrayBuffer())\r\n            .then(arrayBuffer => this.audioContext.decodeAudioData(arrayBuffer))\r\n    }\r\n    addAudio(name, buffer) {\r\n        this.audioBuffers.set(name, buffer)\r\n    }\r\n    playAudio(name) {\r\n        const source = this.audioContext.createBufferSource()\r\n        source.connect(this.gainNodeFx)\r\n        this.gainNodeFx.connect(this.audioContext.destination)\r\n        source.buffer = this.audioBuffers.get(name)\r\n        source.start(0)\r\n    }\r\n    playMusic(name) {\r\n        const source = this.audioContext.createBufferSource()\r\n        source.connect(this.gainNodeMusic)\r\n        this.gainNodeMusic.connect(this.audioContext.destination)\r\n        source.buffer = this.audioBuffers.get(name)\r\n        source.loop = true\r\n        source.start(0)\r\n    }\r\n    changeVolume(type, value) {\r\n        if (type === 'MUSIC') {\r\n            this.gainNodeMusic.gain.value = value\r\n        } else if (type === 'FX') {\r\n            this.gainNodeFx.gain.value = value\r\n        }\r\n    }\r\n    async loadAllSounds() {\r\n        await Promise.all([\r\n            audioPlayer.loadAudio(gunshotSrc),\r\n            audioPlayer.loadAudio(splashSrc),\r\n            audioPlayer.loadAudio(glassShatterSrc),\r\n            audioPlayer.loadAudio(musicSrc),\r\n            audioPlayer.loadAudio(seedSrc),\r\n            audioPlayer.loadAudio(plantSrc),\r\n            audioPlayer.loadAudio(spiderBiteSrc)\r\n        ]).then(([gunshot, splash, glass, music, seed, plant, spiderBite]) => {\r\n            audioPlayer.addAudio('gunshot', gunshot)\r\n            audioPlayer.addAudio('splash', splash)\r\n            audioPlayer.addAudio('glass', glass)\r\n            audioPlayer.addAudio('music', music)\r\n            audioPlayer.addAudio('seed', seed)\r\n            audioPlayer.addAudio('plant', plant)\r\n            audioPlayer.addAudio('spiderBite', spiderBite)\r\n        })\r\n    }\r\n}\r\n\r\nexport const audioPlayer = new AudioPlayer()\r\n","export function loadImage(url) {\r\n    return new Promise(resolve => {\r\n        const image = new Image()\r\n        image.addEventListener('load', () => {\r\n            resolve(image)\r\n        })\r\n        image.src = url\r\n    })\r\n}\r\n\r\nexport function loadManifest(name) {\r\n    return fetch(`./manifests/${name}.json`).then(res => res.json())\r\n}\r\n\r\nexport function loadAnimations(animations) {\r\n    const animationsMap = new Map()\r\n    animations.forEach(animation => {\r\n        const spriteMap = new Map()\r\n        animation.frames.forEach(frame => {\r\n            spriteMap.set(frame.name, frame.rect)\r\n        })\r\n        animationsMap.set(animation.name, spriteMap)\r\n    })\r\n    return animationsMap\r\n}\r\n","import { canvas } from '/src/shared/canvas'\r\nimport { groundHeight } from '/src/shared/canvas'\r\nimport { setUpKeyboard, setUpMouse } from '../input'\r\nimport { audioPlayer } from '../AudioPlayer'\r\nimport { loadImage, loadManifest, loadAnimations } from './loaders'\r\nimport { groundY } from '/src/shared/canvas'\r\n\r\nexport class Character {\r\n    constructor(manifest) {\r\n        this.manifest = manifest\r\n        this.direction = {\r\n            left: false,\r\n            right: false,\r\n            jumping: false\r\n        }\r\n        this.isOnGround = true\r\n        this.deltaX = 0\r\n        this.deltaY = 0\r\n        this.angle = 0\r\n        this.velocityX = 6\r\n        this.velocityY = 0\r\n        this.gravity = 0.6\r\n        this.flip = false\r\n        this.shot = false\r\n        this.distance = 0\r\n        this.ready = true\r\n        this.streak = 0\r\n        this.highestStreak = 0\r\n        this.lowerBody = {\r\n            ...this.manifest.lowerBody,\r\n            runningAnimation: this.manifest.animations.get('running'),\r\n            jumpingAnimation: this.manifest.animations.get('jumping')\r\n        }\r\n        this.upperBody = {\r\n            ...this.manifest.upperBody,\r\n            x: this.x - 30,\r\n            y: this.y - this.lowerBody.height + 70\r\n        }\r\n        this.x = 0\r\n        this.y = canvas.height - groundHeight - this.lowerBody.height + 5\r\n        this.flashAnimation = {\r\n            active: false,\r\n            duration: 3,\r\n            frame: 0,\r\n            image: this.manifest.flashImage\r\n        }\r\n        this.shootingAnimation = {\r\n            active: false,\r\n            duration: 4,\r\n            frame: 0,\r\n            size: 5\r\n        }\r\n        this.setUp()\r\n    }\r\n    draw(ctx) {\r\n        this.upperBody = {\r\n            ...this.upperBody,\r\n            rotationPoint: {\r\n                x: this.x + this.lowerBody.width / 2,\r\n                y: this.y + 25\r\n            },\r\n            x: this.x - 25,\r\n            y: this.y - this.lowerBody.height + (this.flip ? 160 : 100)\r\n        }\r\n        ctx.strokeStyle = 'red'\r\n        //ctx.strokeRect(this.x, this.y, this.lowerBody.width, this.lowerBody.height)\r\n        this.getFrame(ctx, `walk-${Math.floor(this.distance / 20) % this.lowerBody.runningAnimation.size}`)\r\n        //this.getFrame(ctx, 'walk-1')\r\n        ctx.translate(this.upperBody.rotationPoint.x, this.upperBody.rotationPoint.y)\r\n        ctx.rotate(this.angle)\r\n        ctx.translate(-this.upperBody.rotationPoint.x, -this.upperBody.rotationPoint.y)\r\n        ctx.strokeStyle = 'limegreen'\r\n        this.runShootingAnimation()\r\n        ctx.drawImage(\r\n            this.flip ? this.upperBody.imageFlipped : this.upperBody.image,\r\n            this.upperBody.x,\r\n            this.upperBody.y,\r\n            this.upperBody.width,\r\n            this.upperBody.height\r\n        )\r\n        //ctx.strokeRect(this.upperBody.x, this.upperBody.y, this.upperBody.width, this.upperBody.height)\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0)\r\n        ctx.fillStyle = 'blue'\r\n        //d ctx.fillRect(this.upperBody.rotationPoint.x - 5, this.upperBody.rotationPoint.y - 5, 10, 10)\r\n    }\r\n    move() {\r\n        this.velocityY += this.gravity\r\n        this.y += this.velocityY\r\n\r\n        if (this.y + this.lowerBody.height >= groundY) {\r\n            this.y = groundY - this.lowerBody.height\r\n            this.isOnGround = true\r\n            this.velocityY = 0.0\r\n        }\r\n\r\n        if (this.direction.left) {\r\n            if (this.x > 0) {\r\n                this.x -= this.velocityX\r\n                this.distance += this.velocityX\r\n            }\r\n        } else if (this.direction.right) {\r\n            if (this.x < canvas.width - this.upperBody.width) {\r\n                this.x += this.velocityX\r\n                this.distance += this.velocityX\r\n            }\r\n        } else {\r\n            if (this.ready) this.distance = 0\r\n        }\r\n        if (this.direction.jumping) {\r\n            if (this.isOnGround) {\r\n                this.velocityY = -12.0\r\n                this.isOnGround = false\r\n            }\r\n        }\r\n    }\r\n    getFrame(ctx, name) {\r\n        if (this.isOnGround) {\r\n            const frame = this.lowerBody.runningAnimation.get(name)\r\n            if (frame) {\r\n                ctx.drawImage(\r\n                    this.lowerBody.spriteSheet,\r\n                    frame.x,\r\n                    this.flip ? frame.y + frame.height : frame.y,\r\n                    frame.width,\r\n                    frame.height,\r\n                    this.x,\r\n                    this.y,\r\n                    this.lowerBody.width,\r\n                    this.lowerBody.height\r\n                )\r\n            } else {\r\n                ctx.drawImage(\r\n                    this.lowerBody.spriteSheet,\r\n                    frame.x,\r\n                    this.flip ? frame.y + frame.height : frame.y,\r\n                    frame.width,\r\n                    frame.height,\r\n                    this.x,\r\n                    this.y,\r\n                    this.lowerBody.width,\r\n                    this.lowerBody.height\r\n                )\r\n            }\r\n        } else {\r\n            const frame = this.lowerBody.jumpingAnimation.get('jump-0')\r\n            ctx.drawImage(\r\n                this.lowerBody.spriteSheet,\r\n                frame.x,\r\n                this.flip ? frame.y + frame.height : frame.y,\r\n                frame.width,\r\n                frame.height,\r\n                this.x,\r\n                this.y,\r\n                this.lowerBody.width,\r\n                this.lowerBody.height\r\n            )\r\n        }\r\n    }\r\n    drawFlash(maskCtx) {\r\n        if (this.flashAnimation.active == true) {\r\n            if (this.flashAnimation.frame >= this.flashAnimation.duration) {\r\n                this.flashAnimation.frame = 0\r\n                this.flashAnimation.active = false\r\n            } else {\r\n                this.flashAnimation.frame++\r\n                maskCtx.fillStyle = 'rgba(249, 191, 0, 0.1)'\r\n                maskCtx.fillRect(0, 0, canvas.width, canvas.height)\r\n                maskCtx.translate(this.upperBody.rotationPoint.x, this.upperBody.rotationPoint.y)\r\n                maskCtx.rotate(this.angle)\r\n                maskCtx.translate(-this.upperBody.rotationPoint.x, -this.upperBody.rotationPoint.y)\r\n                maskCtx.strokeStyle = 'limegreen'\r\n                //ctx.strokeRect(this.upperBody.x, this.upperBody.y, this.upperBody.width, this.upperBody.height)\r\n                maskCtx.drawImage(\r\n                    this.flashAnimation.image,\r\n                    this.upperBody.x + this.upperBody.width,\r\n                    this.upperBody.y + (this.flip ? 0 : 100),\r\n                    this.upperBody.width,\r\n                    this.upperBody.height / 2\r\n                )\r\n                maskCtx.setTransform(1, 0, 0, 1, 0, 0)\r\n            }\r\n        }\r\n    }\r\n    runShootingAnimation() {\r\n        if (this.shootingAnimation.active) {\r\n            if (this.shootingAnimation.frame >= this.shootingAnimation.duration) {\r\n                this.shootingAnimation.frame = 0\r\n                this.shootingAnimation.active = false\r\n            } else {\r\n                this.shootingAnimation.frame++\r\n                this.upperBody.x = this.upperBody.x - this.shootingAnimation.size * this.shootingAnimation.frame\r\n            }\r\n        }\r\n    }\r\n    rotate(clientX, clientY) {\r\n        //const deltaX = this.x + this.upperBody.width / 2 - clientX\r\n        //const deltaY = this.y + this.upperBody.height / 2 - clientY\r\n        this.angle =\r\n            Math.atan2(this.y + this.upperBody.height / 2 - clientY, this.x + this.upperBody.width / 2 - clientX) +\r\n            Math.PI\r\n        if (this.angle > 1.5 && this.angle < 4.7) {\r\n            this.flip = true\r\n        } else {\r\n            this.flip = false\r\n        }\r\n    }\r\n    onClick() {\r\n        audioPlayer.playAudio('gunshot')\r\n        this.flashAnimation.active = true\r\n        this.shootingAnimation.active = true\r\n    }\r\n    setUp() {\r\n        setUpKeyboard(this)\r\n        setUpMouse(this)\r\n    }\r\n}\r\n\r\nexport const loadCharacter = async () => {\r\n    const manifest = await loadManifest('character')\r\n    manifest.lowerBody = {\r\n        ...manifest.lowerBody,\r\n        spriteSheet: await loadImage(manifest.lowerBody.spriteSheetURL)\r\n    }\r\n    manifest.upperBody = {\r\n        ...manifest.upperBody,\r\n        image: await loadImage(manifest.upperBody.imageURL),\r\n        imageFlipped: await loadImage(manifest.upperBody.flippedImageURL)\r\n    }\r\n    manifest.flashImage = await loadImage(manifest.flashImageURL)\r\n    manifest.animations = loadAnimations(manifest.animationsToBeLoaded)\r\n    return new Character(manifest)\r\n}\r\n","import { canvas } from '/src/shared/canvas'\r\nimport { loadImage, loadManifest } from '/src/classes/loaders'\r\n\r\nexport class Scene {\r\n    constructor(manifest) {\r\n        this.manifest = manifest\r\n    }\r\n    draw(ctx) {\r\n        ctx.drawImage(this.manifest.image, 0, 0, canvas.width, canvas.height)\r\n    }\r\n}\r\n\r\nexport const loadScene = async () => {\r\n    const manifest = await loadManifest('scene')\r\n    manifest.image = await loadImage(manifest.mainImageURL)\r\n    return new Scene(manifest)\r\n}\r\n","export function getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max))\r\n}\r\n\r\nexport function randomIntFromRange(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n}\r\n\r\nexport function checkCollision(obj1, obj2) {\r\n    if (\r\n        obj1.x < obj2.x + obj2.width &&\r\n        obj1.x + obj1.width > obj2.x &&\r\n        obj1.y < obj2.y + obj2.height &&\r\n        obj1.y + obj1.height > obj2.y\r\n    ) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n","import { canvas, canvasCenter } from '/src/shared/canvas'\r\nimport { randomIntFromRange } from '/src/shared/helpers'\r\nimport { audioPlayer } from '../AudioPlayer'\r\nimport { loadImage, loadManifest } from './loaders'\r\n\r\nexport class Spider {\r\n    constructor(manifest) {\r\n        const { destination, position, width, height, speed } = manifest\r\n        this.manifest = manifest\r\n        this.height = width\r\n        this.width = height\r\n        this.x = position.x\r\n        this.y = position.y\r\n        this.isShot = false\r\n        this.hasKilledAPlant = false\r\n        this.killer = {}\r\n        this.deltaX = destination.x - this.x\r\n        this.deltaY = destination.y - this.y\r\n        this.angle = Math.atan2(this.deltaY, this.deltaX)\r\n        this.splashAngle = 0\r\n        this.velocityX = Math.cos(this.angle) * 1.0\r\n        this.velocityY = Math.sin(this.angle) * 1.0\r\n        this.direction = this.angle - Math.PI / 2\r\n        this.distance = 0\r\n        this.speed = speed\r\n        this.points = {\r\n            shown: false,\r\n            value: Math.floor(1000 / this.width),\r\n            y: this.y,\r\n            speed: 2,\r\n            multiplier: 1\r\n        }\r\n    }\r\n    draw(ctx) {\r\n        if (!this.isShot && !this.hasKilledAPlant) {\r\n            this.distance += 2\r\n            ctx.translate(this.x + this.width / 2, this.y + this.height / 2)\r\n            ctx.rotate(this.direction)\r\n            ctx.translate(-this.x - this.width / 2, -this.y - this.height / 2)\r\n            this.getFrame(ctx, `spider-${Math.floor(this.distance / 20) % this.manifest.spriteMap.size}`)\r\n            ctx.setTransform(1, 0, 0, 1, 0, 0)\r\n            this.checkCollision()\r\n        } else if (this.hasKilledAPlant) {\r\n        } else {\r\n            ctx.translate(this.x + this.width / 2, this.y + this.height / 2)\r\n            ctx.rotate(-this.splashAngle + Math.PI)\r\n            ctx.translate(-this.x - this.width / 2, -this.y - this.height / 2)\r\n            ctx.drawImage(\r\n                this.manifest.splashImage,\r\n                this.x - 10,\r\n                this.y - this.height,\r\n                this.width + 20,\r\n                this.height * 2\r\n            )\r\n            ctx.setTransform(1, 0, 0, 1, 0, 0)\r\n            if (this.points.shown) {\r\n                this.drawPoints(ctx)\r\n            }\r\n        }\r\n    }\r\n    checkCollision() {\r\n        this.manifest.plants.forEach(plant => {\r\n            if (\r\n                plant.plantBoundingRect.x < this.x + this.width &&\r\n                plant.plantBoundingRect.x + plant.plantBoundingRect.width > this.x &&\r\n                plant.plantBoundingRect.y < this.y + this.height &&\r\n                plant.plantBoundingRect.y + plant.plantBoundingRect.height > this.y\r\n            ) {\r\n                plant.shrink()\r\n                audioPlayer.playAudio('spiderBite')\r\n                this.hasKilledAPlant = true\r\n                window.game.state.spidersKilled += 1\r\n                if (window.game.state.spidersKilled === window.game.levels[window.game.state.level].numberOfSpiders) {\r\n                    window.game.state.level++\r\n                }\r\n                const res = this.manifest.plants.reduce((acc, plant) => {\r\n                    return acc + plant.size\r\n                }, 0)\r\n                if (res === this.manifest.plants.length * -1) {\r\n                    window.game.state.gameOver = true\r\n                }\r\n            }\r\n        })\r\n    }\r\n    drawPoints(ctx) {\r\n        this.points.y -= this.points.speed\r\n        ctx.font = `${this.width - 10}px Anton`\r\n        ctx.fillStyle = 'white'\r\n        ctx.textAlign = 'center'\r\n        ctx.fillText(Math.floor(this.points.value * this.points.multiplier), this.x + this.width / 2, this.points.y)\r\n        if (this.points.y < 0) {\r\n            this.points.shown = false\r\n        }\r\n    }\r\n    getFrame(ctx, name) {\r\n        const frame = this.manifest.spriteMap.get(name)\r\n        if (frame) {\r\n            ctx.drawImage(\r\n                this.manifest.image,\r\n                frame.x,\r\n                frame.y,\r\n                frame.width,\r\n                frame.height,\r\n                (this.x += this.velocityX * this.speed),\r\n                (this.y += this.velocityY * this.speed),\r\n                this.width,\r\n                this.height\r\n            )\r\n        }\r\n    }\r\n    onClick() {\r\n        window.game.state.streak += 1\r\n        window.game.state.spidersKilledTotal += 1\r\n        window.game.state.spidersKilled += 1\r\n        this.points.multiplier = 1 + window.game.state.streak * 0.1\r\n        window.game.state.score += Math.floor(this.points.value * this.points.multiplier)\r\n        if (window.game.state.streak > window.game.state.biggestStreak) {\r\n            window.game.state.biggestStreak = window.game.state.streak\r\n        }\r\n        setTimeout(() => audioPlayer.playAudio('splash'), 100)\r\n        this.isShot = true\r\n        this.points.shown = true\r\n        this.points.y = this.y\r\n        this.killer = { x: this.manifest.character.upperBody.x, y: this.manifest.character.upperBody.y }\r\n        const deltaX = this.x - (this.killer.x + this.manifest.character.upperBody.width / 2)\r\n        const deltaY = this.y - (this.killer.y + 100)\r\n        this.splashAngle = Math.atan2(deltaX, deltaY)\r\n        if (window.game.state.spidersKilled === window.game.levels[window.game.state.level].numberOfSpiders) {\r\n            window.game.state.level++\r\n        }\r\n    }\r\n}\r\n\r\nexport class SpiderFactory {\r\n    constructor(manifest) {\r\n        this.manifest = manifest\r\n    }\r\n    createSpiders(numberOfSpiders, character, plants) {\r\n        this.manifest.character = character\r\n        this.manifest.plants = plants\r\n        this.manifest.speed = window.game.config.settings.spiders[window.game.difficulty].speed\r\n        let spiders = []\r\n        for (let i = 0; i < numberOfSpiders; i++) {\r\n            this.manifest.position = {\r\n                x: randomIntFromRange(-200, canvas.width + 200),\r\n                y: randomIntFromRange(-200, 0)\r\n            }\r\n            const size = randomIntFromRange(25, 80)\r\n            this.manifest.width = size\r\n            this.manifest.height = size\r\n\r\n            //spider will pick a random plant and attack it\r\n            const plant = plants[randomIntFromRange(0, plants.length - 1)]\r\n            this.manifest.destination = {\r\n                x: plant.x + plant.width / 2,\r\n                y: plant.y\r\n            }\r\n            spiders.push(new Spider(this.manifest))\r\n        }\r\n        return spiders\r\n    }\r\n}\r\n\r\nexport const loadSpiderFactory = async () => {\r\n    const manifest = await loadManifest('spider')\r\n    manifest.image = await loadImage(manifest.mainImageURL)\r\n    manifest.splashImage = await loadImage(manifest.splashImageURL)\r\n    const spriteMap = new Map()\r\n    manifest.frames.forEach(frame => {\r\n        spriteMap.set(frame.name, frame.rect)\r\n    })\r\n    manifest.spriteMap = spriteMap\r\n    return new SpiderFactory(manifest)\r\n}\r\n\r\ndocument.querySelectorAll('audio').forEach(function (audioElement) {\r\n    if (audioElement.muted) {\r\n        audioElement.muted = false\r\n    } else {\r\n        audioElement.muted = true\r\n    }\r\n})\r\n","import { audioPlayer } from '../AudioPlayer'\r\n\r\n// file for interaction between html elements and canvas\r\nexport const addEventListeners = plants => {\r\n    document.querySelector('#settings-button').addEventListener('click', () => {\r\n        document.querySelector('#settings').classList.remove('hidden')\r\n        window.game.state.paused = true\r\n    })\r\n\r\n    document.querySelector('#close-modal').addEventListener('click', () => {\r\n        document.querySelector('#settings').classList.add('hidden')\r\n        window.game.state.paused = false\r\n    })\r\n\r\n    document.querySelector('#fx-slider').addEventListener('change', e => {\r\n        audioPlayer.playAudio('gunshot')\r\n        audioPlayer.changeVolume('FX', e.target.value)\r\n    })\r\n\r\n    document.querySelector('#music-slider').addEventListener('input', e => {\r\n        audioPlayer.changeVolume('MUSIC', e.target.value)\r\n    })\r\n\r\n    document.querySelectorAll('#difficulty-setting .radio').forEach(input => {\r\n        input.addEventListener('click', e => {\r\n            window.game.difficulty = e.target.value\r\n            window.game.state.shouldRestart = true\r\n            window.game.state.paused = false\r\n        })\r\n    })\r\n}\r\n\r\nexport const showGameOver = () => {\r\n    document.querySelector('#gameOverScreen').classList.remove('hidden')\r\n    const scorePlants = window.game.plants.reduce((acc, plant) => {\r\n        return acc + plant.size * 1000\r\n    }, 0)\r\n    if (scorePlants === -3000) {\r\n        document.querySelector('#gameOverScreen .lost').classList.remove('hidden')\r\n    } else {\r\n        document.querySelector('#gameOverScreen .win').classList.remove('hidden')\r\n        document.querySelector('#gameOverScreen #score').innerText = window.game.state.score + scorePlants\r\n        document.querySelector('#gameOverScreen #score-spiders').innerText = window.game.state.score\r\n        document.querySelector('#gameOverScreen #score-plants').innerText = scorePlants\r\n        document.querySelector('#gameOverScreen #score-streak').innerText = window.game.state.biggestStreak\r\n        document.querySelector('#gameOverScreen #score-difficulty').innerText = window.game.difficulty.toLowerCase()\r\n        document.querySelector('#gameOverScreen #score-difficulty').dataset.diff = window.game.difficulty\r\n    }\r\n\r\n    document.querySelector('#restart-button').addEventListener('click', () => {\r\n        document.querySelector('#gameOverScreen').classList.add('hidden')\r\n        window.game.state.shouldRestart = true\r\n        window.game.state.paused = false\r\n    })\r\n}\r\n\r\nexport const updateLevel = () => {\r\n    if (window.game.state.level >= 0) {\r\n        document.querySelector('#level').innerText = window.game.state.level + 1\r\n        //document.querySelector('#level').classList.remove('hidden')\r\n    }\r\n}\r\n\r\nexport const updateScore = () => {\r\n    document.querySelector('#score').innerText = window.game.state.score\r\n}\r\n\r\nexport const updateStreak = () => {\r\n    const streak = document.querySelector('#streak')\r\n    const streakCont = document.querySelector('#streak-container')\r\n    streak.innerText = Math.floor((1 + window.game.state.streak * 0.1) * 10) / 10\r\n    if (window.game.state.streak !== 0) {\r\n        streakCont.classList.remove('hidden')\r\n        streak.classList.remove('streak-animation')\r\n        streak.offsetWidth\r\n        streak.classList.add('streak-animation')\r\n        //streak.style.color = '#' + (((1 << 24) * Math.random()) | 0).toString(16)\r\n    } else {\r\n        streakCont.classList.add('hidden')\r\n    }\r\n}\r\n\r\nexport const hideLoadingScreen = () => {\r\n    document.querySelector('#loadingScreen').classList.add('hidden')\r\n}\r\n","import { groundY } from '/src/shared/canvas'\r\nimport { canvas } from '/src/shared/canvas'\r\nimport { addEventListeners } from '/src/shared/UI'\r\nimport { loadImage, loadManifest } from '/src/classes/loaders'\r\nimport { audioPlayer } from '../AudioPlayer'\r\n\r\nexport class PlantFactory {\r\n    constructor(manifest) {\r\n        this.manifest = manifest\r\n    }\r\n    createPlants(numberOfPlants) {\r\n        const { width, height, image, loadedPlantImages, potMargin, plantSizes } = this.manifest\r\n        const plants = []\r\n        const widthSum = width * numberOfPlants + potMargin * (numberOfPlants - 1)\r\n        const offset = (canvas.width - widthSum) / 2\r\n        //plantSizes.reduce((acc, b) => acc + b.width, 0)\r\n\r\n        for (let i = 0; i < numberOfPlants; i++) {\r\n            plants.push(\r\n                new Plant(\r\n                    offset + (width + (i === numberOfPlants ? 0 : potMargin)) * i,\r\n                    groundY - height,\r\n                    plantSizes,\r\n                    image,\r\n                    loadedPlantImages,\r\n                    i\r\n                )\r\n            )\r\n        }\r\n        addEventListeners(plants)\r\n        return plants\r\n    }\r\n}\r\n\r\nexport class Plant {\r\n    constructor(positionX, positionY, plantSizes, image, plantImages, id) {\r\n        this.id = id\r\n        this.x = positionX\r\n        this.y = positionY - 15\r\n        this.size = 0\r\n        this.plantSizes = plantSizes\r\n        this.planted = false\r\n        this.showSeed = true\r\n        this.plantImages = plantImages\r\n        this.width = 170\r\n        this.height = 120\r\n        this.potCenter = {\r\n            x: this.x + this.width / 2,\r\n            y: this.y + this.height / 2\r\n        }\r\n        this.image = image\r\n        this.timeToShowSeedButton = 1\r\n        this.activePlant = plantSizes[this.size]\r\n        this.activePlantImage = plantImages[this.size]\r\n        this.plantBoundingRect = {\r\n            x: this.potCenter.x - this.activePlant.width / 2,\r\n            y: this.y - this.activePlant.height,\r\n            width: this.activePlant.width,\r\n            height: this.activePlant.height\r\n        }\r\n        this.createSeedButton()\r\n    }\r\n    draw(ctx) {\r\n        ctx.drawImage(this.image, this.x, this.y, this.width, this.height)\r\n        if (this.planted) {\r\n            ctx.drawImage(\r\n                this.activePlantImage,\r\n                this.plantBoundingRect.x,\r\n                this.plantBoundingRect.y,\r\n                this.plantBoundingRect.width,\r\n                this.plantBoundingRect.height\r\n            )\r\n        }\r\n    }\r\n    grow() {\r\n        audioPlayer.playAudio('plant')\r\n        if (this.size < this.plantImages.length - 1 && this.planted) {\r\n            this.size++\r\n            this.activePlant = this.plantSizes[this.size]\r\n            this.activePlantImage = this.plantImages[this.size]\r\n            this.plantBoundingRect = {\r\n                x: this.potCenter.x - this.activePlant.width / 2,\r\n                y: this.y - this.activePlant.height,\r\n                width: this.activePlant.width,\r\n                height: this.activePlant.height\r\n            }\r\n        }\r\n    }\r\n    shrink() {\r\n        if (this.size > 0 && this.planted) {\r\n            this.size--\r\n            this.activePlant = this.plantSizes[this.size]\r\n            this.activePlantImage = this.plantImages[this.size]\r\n            this.plantBoundingRect = {\r\n                x: this.potCenter.x - this.activePlant.width / 2,\r\n                y: this.y - this.activePlant.height,\r\n                width: this.activePlant.width,\r\n                height: this.activePlant.height\r\n            }\r\n        } else {\r\n            this.size = -1\r\n            this.planted = false\r\n        }\r\n    }\r\n    onClick() {\r\n        //this.grow()\r\n    }\r\n    plantSeed() {\r\n        audioPlayer.playAudio('seed')\r\n        window.game.state.seedsPlanted += 1\r\n        this.planted = true\r\n        document.querySelector(`.seedButton[data-id=\"${this.id}\"]`).removeEventListener('click', this.plantSeed)\r\n        document.querySelector(`.seedButton[data-id=\"${this.id}\"]`).classList.remove('active')\r\n    }\r\n    showSeedButton() {\r\n        document.querySelector(`.seedButton[data-id=\"${this.id}\"]`).classList.add('active')\r\n        document.querySelector(`.seedButton[data-id=\"${this.id}\"]`).addEventListener('click', this.plantSeed.bind(this))\r\n    }\r\n    createSeedButton() {\r\n        if (!document.querySelector(`.seedButton[data-id=\"${this.id}\"]`)) {\r\n            overlay.innerHTML += `\r\n                <div \r\n                    class=\"seedButton\"\r\n                    data-id=\"${this.id}\"\r\n                    style=\"left: ${this.potCenter.x - 40}px; top: ${this.potCenter.y - 160}px;\" \r\n                >\r\n                    <div class=\"seedButton__image\">\r\n                    </div>\r\n                </div>\r\n            `\r\n        }\r\n    }\r\n}\r\n\r\nexport const loadPlantFactory = async () => {\r\n    const manifest = await loadManifest('plant')\r\n    manifest.image = await loadImage(manifest.mainImageURL)\r\n    manifest.loadedPlantImages = []\r\n    Promise.all([\r\n        loadImage(manifest.plantImages[0]),\r\n        loadImage(manifest.plantImages[1]),\r\n        loadImage(manifest.plantImages[2]),\r\n        loadImage(manifest.plantImages[3])\r\n    ]).then(async plants => {\r\n        manifest.loadedPlantImages = await plants\r\n    })\r\n    return new PlantFactory(manifest)\r\n}\r\n","import { canvas, maskCtx } from '/src/shared/canvas'\r\nimport { audioPlayer } from '../AudioPlayer'\r\nimport { loadImage, loadManifest } from './loaders'\r\n\r\nexport class Light {\r\n    constructor(id, positionX, positionY, width, height, image, color, lightWidth, turnOn, numberOfLights) {\r\n        this.id = id\r\n        this.width = width\r\n        this.height = height\r\n        this.x = positionX\r\n        this.y = positionY\r\n        this.lampCenter = {\r\n            x: this.x + this.width / 2,\r\n            y: this.y + this.height / 2\r\n        }\r\n        this.turnedOn = false\r\n        this.color = color\r\n        this.lightWidth = lightWidth\r\n        this.image = image\r\n        this.offset = 10\r\n        this.isShot = false\r\n        this.perspective = 40\r\n        this.turnOn = turnOn\r\n        this.numberOfLights = numberOfLights\r\n    }\r\n    drawLight(ctx) {\r\n        if (this.turnedOn) {\r\n            ctx.beginPath()\r\n            //top left\r\n            ctx.moveTo(this.x + this.offset, this.y + this.height)\r\n            //bottom left\r\n            if (this.id == 0) {\r\n                ctx.lineTo(this.x - this.lightWidth, canvas.height - 65)\r\n                ctx.lineTo(this.x - this.lightWidth - this.perspective, canvas.height)\r\n            } else {\r\n                ctx.lineTo(this.x - this.lightWidth, canvas.height)\r\n            }\r\n            //bottom right\r\n            if (this.id == this.numberOfLights - 1) {\r\n                ctx.lineTo(this.x + +this.width + this.lightWidth + this.perspective, canvas.height)\r\n                ctx.lineTo(this.x + this.width + this.lightWidth, canvas.height - 65)\r\n            } else {\r\n                ctx.lineTo(this.x + this.width + this.lightWidth, canvas.height)\r\n            }\r\n            //top right\r\n            ctx.lineTo(this.x + this.width - this.offset, this.y + this.height)\r\n            ctx.closePath()\r\n            ctx.fillStyle = this.color\r\n            ctx.fill()\r\n        }\r\n    }\r\n    drawBody(ctx) {\r\n        ctx.drawImage(this.image, this.x, this.y, this.width, this.height)\r\n    }\r\n    draw(ctx) {\r\n        this.drawBody(ctx)\r\n        this.drawLight(maskCtx)\r\n    }\r\n    onClick() {\r\n        if (!this.isShot) {\r\n            audioPlayer.playAudio('glass')\r\n        }\r\n        this.isShot = true\r\n    }\r\n}\r\n\r\nexport class LightFactory {\r\n    constructor(manifest) {\r\n        this.manifest = manifest\r\n    }\r\n\r\n    createLights(numberOfLights, delay) {\r\n        const { width, height, image, color, lightWidth, lightMargin } = this.manifest\r\n        const lights = []\r\n        const widthSum = width * numberOfLights + lightMargin * (numberOfLights - 1)\r\n        const offset = (canvas.width - widthSum) / 2\r\n\r\n        for (let i = 0; i < numberOfLights; i++) {\r\n            const turnOn = i + delay\r\n            const light = new Light(\r\n                i,\r\n                offset + (width + (i === numberOfLights ? 0 : lightMargin)) * i,\r\n                0,\r\n                width,\r\n                height,\r\n                image,\r\n                color,\r\n                lightWidth,\r\n                turnOn,\r\n                numberOfLights\r\n            )\r\n            lights.push(light)\r\n        }\r\n\r\n        return lights\r\n    }\r\n}\r\n\r\nexport const loadLightFactory = async () => {\r\n    const manifest = await loadManifest('light')\r\n    manifest.image = await loadImage(manifest.mainImageURL)\r\n    return new LightFactory(manifest)\r\n}\r\n","export class Timer {\r\n    constructor() {\r\n        this.startTime = 0\r\n        this.timeElapsed = 0\r\n    }\r\n    start() {\r\n        this.startTime = new Date()\r\n    }\r\n    logTimeElapsed() {\r\n        let timeDiff = (new Date() - this.startTime) / 1000\r\n        let seconds = Math.round(timeDiff)\r\n        if (this.timeElapsed != seconds) {\r\n            this.timeElapsed = seconds\r\n            //console.log(this.timeElapsed)\r\n        }\r\n    }\r\n    getTimeElapsed() {\r\n        return this.timeElapsed\r\n    }\r\n}\r\n","export * from './character'\r\nexport * from './scene'\r\nexport * from './spider'\r\nexport * from './plant'\r\nexport * from './light'\r\nexport * from './loaders'\r\nexport * from './timer'\r\n","export const checkTarget = ({ clientX, clientY }, targets, callback) => {\r\n    callback(\r\n        targets.find(\r\n            target =>\r\n                !target.isShot &&\r\n                clientX > target.x &&\r\n                clientX < target.x + target.width &&\r\n                clientY > target.y &&\r\n                clientY < target.y + target.height\r\n        )\r\n    )\r\n}\r\n","import { ctx, canvas, mask, maskCtx } from '/src/shared/canvas'\r\nimport { loadCharacter, loadScene, loadLightFactory, loadSpiderFactory, loadPlantFactory, Timer } from './classes'\r\nimport { randomIntFromRange } from '/src/shared/helpers'\r\nimport { showGameOver, updateLevel, hideLoadingScreen, updateScore } from '/src/shared/UI'\r\nimport { audioPlayer } from './AudioPlayer'\r\n\r\nimport { checkTarget } from '/src/clickHandler'\r\nimport { updateStreak } from '/src/shared/UI'\r\n\r\nconst defaultState = {\r\n    seedsPlanted: 0,\r\n    seedsShown: false,\r\n    spidersKilled: 0,\r\n    spidersKilledTotal: 0,\r\n    level: -1,\r\n    currentLevel: -1,\r\n    gameOver: false,\r\n    levelUpdated: false,\r\n    score: 0,\r\n    streak: 0,\r\n    biggestStreak: 0,\r\n    shouldRestart: false\r\n}\r\n\r\nconst defaultDifficulty = 'NORMAL'\r\n\r\nexport const GameLoop = async config => {\r\n    window.game = {\r\n        config: config,\r\n        state: JSON.parse(JSON.stringify(defaultState)),\r\n        difficulty: defaultDifficulty,\r\n        levels: config.levels[defaultDifficulty]\r\n    }\r\n\r\n    let timer = new Timer()\r\n    const character = await loadCharacter()\r\n    const scene = await loadScene()\r\n    const plantFactory = await loadPlantFactory()\r\n    const lightFactory = await loadLightFactory()\r\n    const spiderFactory = await loadSpiderFactory()\r\n    await audioPlayer.loadAllSounds()\r\n\r\n    audioPlayer.playMusic('music')\r\n\r\n    let plants = plantFactory.createPlants(config.settings.plants.numberOfPots)\r\n    let lamps = lightFactory.createLights(config.settings.lights.numberOfLights, config.timing.startLights)\r\n    let spiders = []\r\n\r\n    canvas.addEventListener('mousedown', e => {\r\n        checkTarget(e, [...spiders], entity => {\r\n            if (entity) entity.onClick()\r\n            else {\r\n                window.game.state.streak = 0\r\n            }\r\n            updateScore()\r\n            updateStreak(character.streak)\r\n        })\r\n        checkTarget(e, [...lamps, ...plants], entity => {\r\n            if (entity) entity.onClick()\r\n        })\r\n    })\r\n\r\n    const nextLevel = () => {\r\n        window.game.state.currentLevel = window.game.state.level\r\n        window.game.state.levelUpdated = false\r\n        window.game.state.spidersKilled = 0\r\n        spiders = []\r\n    }\r\n\r\n    timer.start()\r\n\r\n    // forcing loading screen to see the amazingness\r\n    //setTimeout(() => hideLoadingScreen(), 2000)\r\n    hideLoadingScreen()\r\n\r\n    const gameLoop = () => {\r\n        if (window.game.state.paused) return window.requestAnimationFrame(gameLoop)\r\n        ctx.globalCompositeOperation = 'normal'\r\n\r\n        scene.draw(ctx)\r\n\r\n        character.move()\r\n\r\n        spiders.forEach(spider => {\r\n            spider.draw(ctx)\r\n        })\r\n\r\n        if (!window.game.state.levelUpdated) {\r\n            window.game.state.levelUpdated = true\r\n            updateLevel()\r\n        }\r\n\r\n        if (!window.game.state.seedsShown) {\r\n            if (config.timing.showSeeds <= timer.getTimeElapsed()) {\r\n                window.game.state.level = 0\r\n                window.game.state.seedsShown = true\r\n                updateLevel()\r\n            }\r\n        }\r\n\r\n        if (window.game.state.level === 0 && window.game.state.currentLevel !== window.game.state.level) {\r\n            if (window.game.state.seedsPlanted == plants.length) {\r\n                if (spiders.length == 0) {\r\n                    spiders = spiderFactory.createSpiders(window.game.levels[0].numberOfSpiders, character, plants)\r\n                }\r\n            }\r\n            if (window.game.state.seedsShown) {\r\n                plants.forEach(plant => {\r\n                    if (plant.showSeed) {\r\n                        plant.showSeedButton()\r\n                        plant.showSeed = false\r\n                    }\r\n                })\r\n            }\r\n        } else if (window.game.state.level === 1 && window.game.state.currentLevel !== window.game.state.level) {\r\n            setTimeout(() => {\r\n                spiders = spiderFactory.createSpiders(window.game.levels[1].numberOfSpiders, character, plants)\r\n            }, 3000)\r\n            nextLevel()\r\n            plants.forEach(plant => {\r\n                plant.grow()\r\n            })\r\n            window.game.plants = plants\r\n        } else if (window.game.state.level === 2 && window.game.state.currentLevel !== window.game.state.level) {\r\n            setTimeout(() => {\r\n                spiders = spiderFactory.createSpiders(window.game.levels[2].numberOfSpiders, character, plants)\r\n            }, 3000)\r\n            nextLevel()\r\n            plants.forEach(plant => {\r\n                plant.grow()\r\n            })\r\n        } else if (window.game.state.level === 3 && window.game.state.currentLevel !== window.game.state.level) {\r\n            nextLevel()\r\n            plants.forEach(plant => {\r\n                plant.grow()\r\n            })\r\n            spiders = spiderFactory.createSpiders(window.game.levels[3].numberOfSpiders, character, plants)\r\n        } else if (window.game.state.level === 4 && window.game.state.currentLevel !== window.game.state.level) {\r\n            nextLevel()\r\n            window.game.state.gameOver = true\r\n        }\r\n\r\n        plants.forEach(plant => {\r\n            plant.draw(ctx)\r\n        })\r\n\r\n        character.draw(ctx)\r\n\r\n        // drawing a black mask over the whole screen\r\n        maskCtx.fillStyle = 'rgb(68, 68, 68)'\r\n        //maskCtx.fillStyle = \"rgb(45, 45, 45)\";\r\n        maskCtx.fillRect(0, 0, mask.width, mask.height)\r\n\r\n        character.drawFlash(maskCtx)\r\n        // adding \"white\" light onto the mask\r\n        lamps.forEach(lamp => {\r\n            if (!lamp.isShot) {\r\n                if (!lamp.turnedOn && lamp.turnOn <= timer.getTimeElapsed()) {\r\n                    lamp.turnedOn = true\r\n                }\r\n                lamp.drawBody(ctx)\r\n                lamp.drawLight(maskCtx)\r\n            } else {\r\n                lamp.drawBody(ctx)\r\n            }\r\n        })\r\n\r\n        // multiply the mask with the underlying canvas\r\n        ctx.globalCompositeOperation = 'multiply'\r\n        ctx.drawImage(mask, 0, 0)\r\n        timer.logTimeElapsed()\r\n\r\n        if (!window.game.state.gameOver && !window.game.state.shouldRestart) {\r\n            window.requestAnimationFrame(gameLoop)\r\n        } else if (window.game.state.shouldRestart) {\r\n            // restart level\r\n            window.game.state = JSON.parse(JSON.stringify(defaultState))\r\n            spiders = []\r\n            document.querySelectorAll(`.seedButton[data-id]`).forEach(el => {\r\n                el.outerHTML = ''\r\n            })\r\n            document.querySelector('#gameOverScreen .win').classList.add('hidden')\r\n            document.querySelector('#gameOverScreen .lost').classList.add('hidden')\r\n            plants = plantFactory.createPlants(config.settings.plants.numberOfPots)\r\n            lamps = lightFactory.createLights(config.settings.lights.numberOfLights, config.timing.startLights)\r\n            window.game.levels = window.game.config.levels[window.game.difficulty]\r\n            window.game.state.streak = 0\r\n            updateStreak()\r\n            window.game.state.shouldRestart = false\r\n\r\n            window.requestAnimationFrame(gameLoop)\r\n        } else {\r\n            window.game.plants = plants\r\n            showGameOver()\r\n            window.game.state.paused = true\r\n            window.requestAnimationFrame(gameLoop)\r\n        }\r\n    }\r\n\r\n    return () => {\r\n        //setInterval(gameLoop, 1000 / 60)\r\n        window.requestAnimationFrame(gameLoop)\r\n    }\r\n}\r\n","module.exports={name:\"Plants and Spiders\",settings:{plants:{numberOfPots:3},lights:{numberOfLights:3},spiders:{EASY:{speed:.7},NORMAL:{speed:1.1},HARD:{speed:1.5}}},timing:{showSeeds:5,startLights:2,delayBetweenLights:1},levels:{EASY:[{numberOfSpiders:7},{numberOfSpiders:12},{numberOfSpiders:17},{numberOfSpiders:20}],NORMAL:[{numberOfSpiders:15},{numberOfSpiders:18},{numberOfSpiders:20},{numberOfSpiders:23}],HARD:[{numberOfSpiders:20},{numberOfSpiders:25},{numberOfSpiders:30},{numberOfSpiders:35}]}};","import { GameLoop } from './gameLoop'\r\nimport config from '/static/manifests/gameConfig.json'\r\nimport './styles/style.scss'\r\n\r\nconst titleScreen = document.querySelector('#titleScreen')\r\nconst tutorialScreen = document.querySelector('#tutorialScreen')\r\ntitleScreen.addEventListener('click', () => {\r\n    titleScreen.classList.add('hidden')\r\n\r\n    tutorialScreen.addEventListener('click', () => {\r\n        tutorialScreen.classList.add('hidden')\r\n\r\n        GameLoop(config).then(startGame => {\r\n            console.log('All systems are go!')\r\n            startGame()\r\n        })\r\n    })\r\n})\r\n\r\n/*features:\r\n- walk up to a plant to grow\r\n- shadows undercharacters\r\n- \r\n*/\r\n\r\n/* \r\n    GAME IDEA:\r\n    - player starts with planting plants\r\n    - spiders are coming towards your plants and want to eat them\r\n    - protect plants against spiders by shooting them\r\n    - plants grow every round\r\n    - spider touching a plant will cause the plant losing one growth cycle thus becoming smaller\r\n    - there will be more spiders and they will be faster or smaller each round (making them harder to hit)\r\n    - each spider picks one of the plants to attack at the beginning of his journey\r\n    - you get points subtracted every time you miss a shot\r\n    - collect plants at the end after 4 rounds, your score depends on how much of your plants is left\r\n    - best achievable score is when all plants are fully grown after 4 rounds and you have missed no shots\r\n*/\r\n"]}