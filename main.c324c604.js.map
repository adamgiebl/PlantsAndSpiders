{"version":3,"sources":["src/shared/canvas.js","src/KeyboardHandler.js","src/input.js","src/AudioPlayer.js","src/classes/loaders.js","src/classes/character.js","src/classes/scene.js","src/shared/helpers.js","src/classes/spider.js","src/shared/UI.js","src/classes/plant.js","src/classes/light.js","src/classes/timer.js","src/classes/index.js","src/clickHandler.js","src/gameLoop.js","static/manifests/gameConfig.json","src/main.js"],"names":["canvas","document","querySelector","ctx","getContext","font","width","innerWidth","height","innerHeight","mask","createElement","maskCtx","groundPositionX","groundHeight","groundY","resizeCanvas","canvasCenter","x","y","window","addEventListener","KeyboardHandler","constructor","keyStates","Map","keyMap","addMapping","code","callback","set","handleEvent","event","has","preventDefault","keyState","type","get","listenTo","forEach","eventName","setUpKeyboard","character","keyboard","direction","right","left","jumping","setUpMouse","clientX","clientY","rotate","e","onClick","AudioPlayer","audioContext","AudioContext","audioBuffers","muted","gainNode","createGain","loadAudio","src","fetch","then","response","arrayBuffer","decodeAudioData","addAudio","name","buffer","playAudio","source","createBufferSource","connect","destination","start","toggleMuteAudio","gain","value","loadAllSounds","Promise","all","audioPlayer","gunshotSrc","splashSrc","glassShatterSrc","musicSrc","gunshot","splash","glass","music","loadImage","url","resolve","image","Image","loadManifest","res","json","loadAnimations","animations","animationsMap","animation","spriteMap","frames","frame","rect","Character","manifest","isOnGround","deltaX","deltaY","angle","velocityX","velocityY","gravity","flip","shot","distance","ready","streak","highestStreak","lowerBody","runningAnimation","jumpingAnimation","upperBody","flashAnimation","active","duration","flashImage","shootingAnimation","size","setUp","draw","rotationPoint","strokeStyle","getFrame","Math","floor","translate","runShootingAnimation","drawImage","imageFlipped","setTransform","fillStyle","move","spriteSheet","drawFlash","fillRect","atan2","PI","epicEntrance","reject","entering","setInterval","clearInterval","loadCharacter","spriteSheetURL","imageURL","flippedImageURL","flashImageURL","animationsToBeLoaded","Scene","loadScene","mainImageURL","getRandomInt","max","random","randomIntFromRange","min","checkCollision","obj1","obj2","Spider","position","isShot","hasKilledAPlant","killer","splashAngle","cos","sin","points","shown","speed","multiplier","splashImage","drawPoints","plants","plant","plantBoundingRect","shrink","game","state","spidersKilled","config","levels","level","numberOfSpiders","textAlign","fillText","spidersKilledTotal","score","biggestStreak","SpiderFactory","createSpiders","spiders","i","length","push","loadSpiderFactory","splashImageURL","addEventListeners","querySelectorAll","el","target","dataset","id","plantSeed","classList","toggle","showGameOver","remove","innerHTML","reduce","acc","updateLevel","innerText","updateScore","updateStreak","streakCont","offsetWidth","add","hideLoadingScreen","PlantFactory","createPlants","numberOfPlants","loadedPlantImages","potMargin","plantSizes","widthSum","offset","Plant","positionX","positionY","plantImages","planted","showSeed","potCenter","timeToShowSeedButton","activePlant","activePlantImage","createSeedButton","grow","seedsPlanted","outerHTML","showSeedButton","overlay","loadPlantFactory","Light","color","lightWidth","turnOn","numberOfLights","lampCenter","turnedOn","perspective","drawLight","beginPath","moveTo","lineTo","closePath","fill","drawBody","LightFactory","createLights","delay","lightMargin","lights","light","loadLightFactory","Timer","startTime","timeElapsed","Date","logTimeElapsed","timeDiff","seconds","round","getTimeElapsed","checkTarget","targets","find","GameLoop","seedsShown","currentLevel","gameOver","levelUpdated","console","log","timer","scene","plantFactory","lightFactory","spiderFactory","settings","numberOfPots","lamps","timing","startLights","entity","nextLevel","gameLoop","globalCompositeOperation","spider","showSeeds","lamp","requestAnimationFrame","module","exports","delayBetweenLights","titleScreen","tutorialScreen","startGame"],"mappings":"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","file":"main.c324c604.js","sourceRoot":"..","sourcesContent":["export const canvas = document.querySelector('canvas')\nexport const ctx = canvas.getContext('2d')\nctx.font = '30px Anton'\ncanvas.width = innerWidth\ncanvas.height = innerHeight\n\nexport const mask = document.createElement('canvas')\nexport const maskCtx = mask.getContext('2d')\nmask.width = innerWidth\nmask.height = innerHeight\n\nexport const groundPositionX = 0\n\nexport const groundHeight = 15\n\nexport let groundY = canvas.height - groundHeight\n\nconst resizeCanvas = () => {\n    canvas.width = innerWidth\n    canvas.height = innerHeight\n    mask.width = innerWidth\n    mask.height = innerHeight\n    groundY = canvas.height - groundHeight\n}\n\nexport const canvasCenter = { x: canvas.width / 2, y: canvas.height / 2 }\n\nwindow.addEventListener('resize', resizeCanvas)\n","export default class KeyboardHandler {\n    constructor() {\n        // Holds the current state of a given key\n        this.keyStates = new Map()\n\n        // Holds the callback functions for a key code\n        this.keyMap = new Map()\n    }\n\n    addMapping(code, callback) {\n        this.keyMap.set(code, callback)\n    }\n\n    handleEvent(event) {\n        const { code } = event\n\n        if (!this.keyMap.has(code)) {\n            return\n        }\n\n        event.preventDefault()\n\n        const keyState = event.type === 'keydown' ? true : false\n\n        if (this.keyStates.get(code) === keyState) {\n            return\n        }\n\n        this.keyStates.set(code, keyState)\n\n        this.keyMap.get(code)(keyState)\n    }\n\n    listenTo(window) {\n        ;['keydown', 'keyup'].forEach(eventName => {\n            window.addEventListener(eventName, event => {\n                this.handleEvent(event)\n            })\n        })\n    }\n}\n","import KeyboardHandler from './KeyboardHandler'\nimport { canvas } from '/src/shared/canvas'\n\nexport const setUpKeyboard = character => {\n    const keyboard = new KeyboardHandler()\n\n    keyboard.addMapping('KeyD', keyState => {\n        character.direction.right = keyState\n    })\n\n    keyboard.addMapping('KeyA', keyState => {\n        character.direction.left = keyState\n    })\n\n    keyboard.addMapping('Space', keyState => {\n        character.direction.jumping = keyState\n    })\n\n    keyboard.listenTo(window)\n}\n\nexport const setUpMouse = character => {\n    canvas.addEventListener('mousemove', ({ clientX, clientY }) => {\n        character.rotate(clientX, clientY)\n    })\n    canvas.addEventListener('click', e => {\n        character.onClick()\n    })\n}\n","import gunshotSrc from '/static/sounds/ShotgunQuieter.mp3'\nimport splashSrc from '/static/sounds/Splash.mp3'\nimport glassShatterSrc from '/static/sounds/GlassShatter.mp3'\nimport musicSrc from '/static/sounds/reggae.mp3'\n\nexport class AudioPlayer {\n    constructor() {\n        this.audioContext = new AudioContext()\n        this.audioBuffers = new Map()\n        this.muted = false\n        this.gainNode = this.audioContext.createGain()\n    }\n    loadAudio(src) {\n        return fetch(src)\n            .then(response => response.arrayBuffer())\n            .then(arrayBuffer => this.audioContext.decodeAudioData(arrayBuffer))\n    }\n    addAudio(name, buffer) {\n        this.audioBuffers.set(name, buffer)\n    }\n    playAudio(name) {\n        const source = this.audioContext.createBufferSource()\n        source.connect(this.gainNode)\n        this.gainNode.connect(this.audioContext.destination)\n        source.buffer = this.audioBuffers.get(name)\n        source.start(0)\n    }\n    toggleMuteAudio() {\n        if (!this.muted) {\n            this.muted = true\n            this.gainNode.gain.value = 0\n        } else {\n            this.muted = false\n            this.gainNode.gain.value = 1\n        }\n    }\n    async loadAllSounds() {\n        await Promise.all([\n            audioPlayer.loadAudio(gunshotSrc),\n            audioPlayer.loadAudio(splashSrc),\n            audioPlayer.loadAudio(glassShatterSrc),\n            audioPlayer.loadAudio(musicSrc)\n        ]).then(([gunshot, splash, glass, music]) => {\n            audioPlayer.addAudio('gunshot', gunshot)\n            audioPlayer.addAudio('splash', splash)\n            audioPlayer.addAudio('glass', glass)\n            audioPlayer.addAudio('music', music)\n        })\n    }\n}\n\nexport const audioPlayer = new AudioPlayer()\naudioPlayer.toggleMuteAudio()\n","export function loadImage(url) {\n    return new Promise(resolve => {\n        const image = new Image()\n        image.addEventListener('load', () => {\n            resolve(image)\n        })\n        image.src = url\n    })\n}\n\nexport function loadManifest(name) {\n    return fetch(`/manifests/${name}.json`).then(res => res.json())\n}\n\nexport function loadAnimations(animations) {\n    const animationsMap = new Map()\n    animations.forEach(animation => {\n        const spriteMap = new Map()\n        animation.frames.forEach(frame => {\n            spriteMap.set(frame.name, frame.rect)\n        })\n        animationsMap.set(animation.name, spriteMap)\n    })\n    return animationsMap\n}\n","import { canvas } from '/src/shared/canvas'\nimport { groundHeight } from '/src/shared/canvas'\nimport { setUpKeyboard, setUpMouse } from '../input'\nimport { audioPlayer } from '../AudioPlayer'\nimport { loadImage, loadManifest, loadAnimations } from './loaders'\nimport { groundY } from '/src/shared/canvas'\n\nexport class Character {\n    constructor(manifest) {\n        this.manifest = manifest\n        this.direction = {\n            left: false,\n            right: false,\n            jumping: false\n        }\n        this.isOnGround = true\n        this.deltaX = 0\n        this.deltaY = 0\n        this.angle = 0\n        this.velocityX = 6\n        this.velocityY = 0\n        this.gravity = 0.6\n        this.flip = false\n        this.shot = false\n        this.distance = 0\n        this.ready = true\n        this.streak = 0\n        this.highestStreak = 0\n        this.lowerBody = {\n            ...this.manifest.lowerBody,\n            runningAnimation: this.manifest.animations.get('running'),\n            jumpingAnimation: this.manifest.animations.get('jumping')\n        }\n        this.upperBody = {\n            ...this.manifest.upperBody,\n            x: this.x - 30,\n            y: this.y - this.lowerBody.height + 70\n        }\n        this.x = 0\n        this.y = canvas.height - groundHeight - this.lowerBody.height + 5\n        this.flashAnimation = {\n            active: false,\n            duration: 3,\n            frame: 0,\n            image: this.manifest.flashImage\n        }\n        this.shootingAnimation = {\n            active: false,\n            duration: 4,\n            frame: 0,\n            size: 5\n        }\n        this.setUp()\n    }\n    draw(ctx) {\n        this.upperBody = {\n            ...this.upperBody,\n            rotationPoint: {\n                x: this.x + this.lowerBody.width / 2,\n                y: this.y + 25\n            },\n            x: this.x - 25,\n            y: this.y - this.lowerBody.height + (this.flip ? 160 : 100)\n        }\n        ctx.strokeStyle = 'red'\n        //ctx.strokeRect(this.x, this.y, this.lowerBody.width, this.lowerBody.height)\n        this.getFrame(ctx, `walk-${Math.floor(this.distance / 20) % this.lowerBody.runningAnimation.size}`)\n        //this.getFrame(ctx, 'walk-1')\n        ctx.translate(this.upperBody.rotationPoint.x, this.upperBody.rotationPoint.y)\n        ctx.rotate(this.angle)\n        ctx.translate(-this.upperBody.rotationPoint.x, -this.upperBody.rotationPoint.y)\n        ctx.strokeStyle = 'limegreen'\n        this.runShootingAnimation()\n        ctx.drawImage(\n            this.flip ? this.upperBody.imageFlipped : this.upperBody.image,\n            this.upperBody.x,\n            this.upperBody.y,\n            this.upperBody.width,\n            this.upperBody.height\n        )\n        //ctx.strokeRect(this.upperBody.x, this.upperBody.y, this.upperBody.width, this.upperBody.height)\n        ctx.setTransform(1, 0, 0, 1, 0, 0)\n        ctx.fillStyle = 'blue'\n        //d ctx.fillRect(this.upperBody.rotationPoint.x - 5, this.upperBody.rotationPoint.y - 5, 10, 10)\n    }\n    move() {\n        this.velocityY += this.gravity\n        this.y += this.velocityY\n\n        if (this.y + this.lowerBody.height >= groundY) {\n            this.y = groundY - this.lowerBody.height\n            this.isOnGround = true\n            this.velocityY = 0.0\n        }\n\n        if (this.direction.left) {\n            if (this.x > 0) {\n                this.x -= this.velocityX\n                this.distance += this.velocityX\n            }\n        } else if (this.direction.right) {\n            if (this.x < canvas.width - this.upperBody.width) {\n                this.x += this.velocityX\n                this.distance += this.velocityX\n            }\n        } else {\n            if (this.ready) this.distance = 0\n        }\n        if (this.direction.jumping) {\n            if (this.isOnGround) {\n                this.velocityY = -12.0\n                this.isOnGround = false\n            }\n        }\n    }\n    getFrame(ctx, name) {\n        if (this.isOnGround) {\n            const frame = this.lowerBody.runningAnimation.get(name)\n            if (frame) {\n                ctx.drawImage(\n                    this.lowerBody.spriteSheet,\n                    frame.x,\n                    this.flip ? frame.y + frame.height : frame.y,\n                    frame.width,\n                    frame.height,\n                    this.x,\n                    this.y,\n                    this.lowerBody.width,\n                    this.lowerBody.height\n                )\n            } else {\n                ctx.drawImage(\n                    this.lowerBody.spriteSheet,\n                    frame.x,\n                    this.flip ? frame.y + frame.height : frame.y,\n                    frame.width,\n                    frame.height,\n                    this.x,\n                    this.y,\n                    this.lowerBody.width,\n                    this.lowerBody.height\n                )\n            }\n        } else {\n            const frame = this.lowerBody.jumpingAnimation.get('jump-0')\n            ctx.drawImage(\n                this.lowerBody.spriteSheet,\n                frame.x,\n                this.flip ? frame.y + frame.height : frame.y,\n                frame.width,\n                frame.height,\n                this.x,\n                this.y,\n                this.lowerBody.width,\n                this.lowerBody.height\n            )\n        }\n    }\n    drawFlash(maskCtx) {\n        if (this.flashAnimation.active == true) {\n            if (this.flashAnimation.frame >= this.flashAnimation.duration) {\n                this.flashAnimation.frame = 0\n                this.flashAnimation.active = false\n            } else {\n                this.flashAnimation.frame++\n                maskCtx.fillStyle = 'rgba(249, 191, 0, 0.1)'\n                maskCtx.fillRect(0, 0, canvas.width, canvas.height)\n                maskCtx.translate(this.upperBody.rotationPoint.x, this.upperBody.rotationPoint.y)\n                maskCtx.rotate(this.angle)\n                maskCtx.translate(-this.upperBody.rotationPoint.x, -this.upperBody.rotationPoint.y)\n                maskCtx.strokeStyle = 'limegreen'\n                //ctx.strokeRect(this.upperBody.x, this.upperBody.y, this.upperBody.width, this.upperBody.height)\n                maskCtx.drawImage(\n                    this.flashAnimation.image,\n                    this.upperBody.x + this.upperBody.width,\n                    this.upperBody.y + (this.flip ? 0 : 100),\n                    this.upperBody.width,\n                    this.upperBody.height / 2\n                )\n                maskCtx.setTransform(1, 0, 0, 1, 0, 0)\n            }\n        }\n    }\n    runShootingAnimation() {\n        if (this.shootingAnimation.active) {\n            if (this.shootingAnimation.frame >= this.shootingAnimation.duration) {\n                this.shootingAnimation.frame = 0\n                this.shootingAnimation.active = false\n            } else {\n                this.shootingAnimation.frame++\n                this.upperBody.x = this.upperBody.x - this.shootingAnimation.size * this.shootingAnimation.frame\n            }\n        }\n    }\n    rotate(clientX, clientY) {\n        const deltaX = this.x + this.upperBody.width / 2 - clientX\n        const deltaY = this.y + this.upperBody.height / 2 - clientY\n        this.angle = Math.atan2(deltaY, deltaX) + Math.PI\n        if (this.angle > 1.5 && this.angle < 4.7) {\n            this.flip = true\n        } else {\n            this.flip = false\n        }\n    }\n    onClick() {\n        audioPlayer.playAudio('gunshot')\n        this.flashAnimation.active = true\n        this.shootingAnimation.active = true\n    }\n    setUp() {\n        setUpKeyboard(this)\n        setUpMouse(this)\n    }\n    epicEntrance() {\n        this.setUp()\n        return new Promise((resolve, reject) => {\n            this.x = -this.upperBody.width\n\n            const entering = setInterval(() => {\n                if (this.x < canvas.width / 7) {\n                    this.x += 1\n                    this.distance += 2\n                } else {\n                    clearInterval(entering)\n                    //this.setUp()\n                    this.ready = true\n                    resolve()\n                }\n            }, 10)\n        })\n    }\n}\n\nexport const loadCharacter = async () => {\n    const manifest = await loadManifest('character')\n    manifest.lowerBody = {\n        ...manifest.lowerBody,\n        spriteSheet: await loadImage(manifest.lowerBody.spriteSheetURL)\n    }\n    manifest.upperBody = {\n        ...manifest.upperBody,\n        image: await loadImage(manifest.upperBody.imageURL),\n        imageFlipped: await loadImage(manifest.upperBody.flippedImageURL)\n    }\n    manifest.flashImage = await loadImage(manifest.flashImageURL)\n    manifest.animations = loadAnimations(manifest.animationsToBeLoaded)\n    return new Character(manifest)\n}\n","import { canvas } from '/src/shared/canvas'\nimport { loadImage, loadManifest } from '/src/classes/loaders'\n\nexport class Scene {\n    constructor(manifest) {\n        this.manifest = manifest\n    }\n    draw(ctx) {\n        ctx.drawImage(this.manifest.image, 0, 0, canvas.width, canvas.height)\n    }\n}\n\nexport const loadScene = async () => {\n    const manifest = await loadManifest('scene')\n    manifest.image = await loadImage(manifest.mainImageURL)\n    return new Scene(manifest)\n}\n","export function getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max))\n}\n\nexport function randomIntFromRange(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nexport function checkCollision(obj1, obj2) {\n    if (\n        obj1.x < obj2.x + obj2.width &&\n        obj1.x + obj1.width > obj2.x &&\n        obj1.y < obj2.y + obj2.height &&\n        obj1.y + obj1.height > obj2.y\n    ) {\n        return true\n    } else {\n        return false\n    }\n}\n","import { canvas, canvasCenter } from '/src/shared/canvas'\nimport { randomIntFromRange } from '/src/shared/helpers'\nimport { audioPlayer } from '../AudioPlayer'\nimport { loadImage, loadManifest } from './loaders'\n\nexport class Spider {\n    constructor(manifest) {\n        const { destination, position, width, height } = manifest\n        this.manifest = manifest\n        this.height = width\n        this.width = height\n        this.x = position.x\n        this.y = position.y\n        this.isShot = false\n        this.hasKilledAPlant = false\n        this.killer = {}\n        this.deltaX = destination.x - this.x\n        this.deltaY = destination.y - this.y\n        this.angle = Math.atan2(this.deltaY, this.deltaX)\n        this.splashAngle = 0\n        this.velocityX = Math.cos(this.angle) * 1.0\n        this.velocityY = Math.sin(this.angle) * 1.0\n        this.direction = this.angle - Math.PI / 2\n        this.distance = 0\n        this.points = {\n            shown: false,\n            value: Math.floor(1000 / this.width),\n            y: this.y,\n            speed: 2,\n            multiplier: 1\n        }\n    }\n    draw(ctx) {\n        if (!this.isShot && !this.hasKilledAPlant) {\n            this.distance += 2\n            ctx.translate(this.x + this.width / 2, this.y + this.height / 2)\n            ctx.rotate(this.direction)\n            ctx.translate(-this.x - this.width / 2, -this.y - this.height / 2)\n            this.getFrame(ctx, `spider-${Math.floor(this.distance / 20) % this.manifest.spriteMap.size}`)\n            ctx.setTransform(1, 0, 0, 1, 0, 0)\n            this.checkCollision()\n        } else if (this.hasKilledAPlant) {\n        } else {\n            ctx.translate(this.x + this.width / 2, this.y + this.height / 2)\n            ctx.rotate(-this.splashAngle + Math.PI)\n            ctx.translate(-this.x - this.width / 2, -this.y - this.height / 2)\n            ctx.drawImage(\n                this.manifest.splashImage,\n                this.x - 10,\n                this.y - this.height,\n                this.width + 20,\n                this.height * 2\n            )\n            ctx.setTransform(1, 0, 0, 1, 0, 0)\n            if (this.points.shown) {\n                this.drawPoints(ctx)\n            }\n        }\n    }\n    checkCollision() {\n        this.manifest.plants.forEach(plant => {\n            if (\n                plant.plantBoundingRect.x < this.x + this.width &&\n                plant.plantBoundingRect.x + plant.plantBoundingRect.width > this.x &&\n                plant.plantBoundingRect.y < this.y + this.height &&\n                plant.plantBoundingRect.y + plant.plantBoundingRect.height > this.y\n            ) {\n                plant.shrink()\n                this.hasKilledAPlant = true\n                window.game.state.spidersKilled += 1\n                if (\n                    window.game.state.spidersKilled ===\n                    window.game.config.levels[window.game.state.level].numberOfSpiders\n                ) {\n                    window.game.state.level++\n                }\n            }\n        })\n    }\n    drawPoints(ctx) {\n        this.points.y -= this.points.speed\n        ctx.font = `${this.width - 10}px Anton`\n        ctx.fillStyle = 'white'\n        ctx.textAlign = 'center'\n        ctx.fillText(Math.floor(this.points.value * this.points.multiplier), this.x + this.width / 2, this.points.y)\n        if (this.points.y < 0) {\n            this.points.shown = false\n        }\n    }\n    getFrame(ctx, name) {\n        const frame = this.manifest.spriteMap.get(name)\n        if (frame) {\n            ctx.drawImage(\n                this.manifest.image,\n                frame.x,\n                frame.y,\n                frame.width,\n                frame.height,\n                (this.x += this.velocityX * 1),\n                (this.y += this.velocityY * 1),\n                this.width,\n                this.height\n            )\n        }\n    }\n    onClick() {\n        window.game.state.streak += 1\n        window.game.state.spidersKilledTotal += 1\n        window.game.state.spidersKilled += 1\n        this.points.multiplier = 1 + window.game.state.streak * 0.1\n        window.game.state.score += Math.floor(this.points.value * this.points.multiplier)\n        if (window.game.state.streak > window.game.state.biggestStreak) {\n            window.game.state.biggestStreak = window.game.state.streak\n        }\n        audioPlayer.playAudio('splash')\n        this.isShot = true\n        this.points.shown = true\n        this.points.y = this.y\n        this.killer = { x: this.manifest.character.upperBody.x, y: this.manifest.character.upperBody.y }\n        const deltaX = this.x - (this.killer.x + this.manifest.character.upperBody.width / 2)\n        const deltaY = this.y - (this.killer.y + 100)\n        this.splashAngle = Math.atan2(deltaX, deltaY)\n        if (window.game.state.spidersKilled === window.game.config.levels[window.game.state.level].numberOfSpiders) {\n            window.game.state.level++\n        }\n    }\n}\n\nexport class SpiderFactory {\n    constructor(manifest) {\n        this.manifest = manifest\n    }\n    createSpiders(numberOfSpiders, character, plants) {\n        this.manifest.character = character\n        this.manifest.plants = plants\n        let spiders = []\n        for (let i = 0; i < numberOfSpiders; i++) {\n            this.manifest.position = {\n                x: randomIntFromRange(-200, canvas.width + 200),\n                y: randomIntFromRange(-200, 0)\n            }\n            const size = randomIntFromRange(25, 80)\n            this.manifest.width = size\n            this.manifest.height = size\n\n            //spider will pick a random plant and attack it\n            const plant = plants[randomIntFromRange(0, plants.length - 1)]\n            this.manifest.destination = {\n                x: plant.x + plant.width / 2,\n                y: plant.y\n            }\n            spiders.push(new Spider(this.manifest))\n        }\n        return spiders\n    }\n}\n\nexport const loadSpiderFactory = async () => {\n    const manifest = await loadManifest('spider')\n    manifest.image = await loadImage(manifest.mainImageURL)\n    manifest.splashImage = await loadImage(manifest.splashImageURL)\n    const spriteMap = new Map()\n    manifest.frames.forEach(frame => {\n        spriteMap.set(frame.name, frame.rect)\n    })\n    manifest.spriteMap = spriteMap\n    return new SpiderFactory(manifest)\n}\n","import { audioPlayer } from '../AudioPlayer'\n\n// file for interaction between html elements and canvas\nexport const addEventListeners = plants => {\n    document.querySelectorAll('.seedButton').forEach(el => {\n        el.addEventListener('click', ({ target }) => {\n            plants[target.dataset.id].plantSeed()\n        })\n    })\n    document.querySelector('#mute-button').addEventListener('click', function () {\n        this.classList.toggle('mute')\n        audioPlayer.toggleMuteAudio()\n    })\n}\n\nexport const showGameOver = () => {\n    document.querySelector('#gameOverScreen').classList.remove('hidden')\n    document.querySelector('#gameOverScreen').innerHTML += `\n        <div>\n            <h2>Spiders killed: ${window.game.state.spidersKilledTotal}</h2>\n            <h2>Points from spiders: ${window.game.state.score}</h2>\n            <h2>Highest killstreak: ${window.game.state.biggestStreak}</h2>\n            <h2>Points from plants: ${window.game.plants.reduce((acc, plant) => {\n                return acc + plant.size * 1000\n            }, 0)}</h2>\n        </div>\n    `\n}\n\nexport const updateLevel = () => {\n    if (window.game.state.level >= 0) {\n        document.querySelector('#level').innerText = window.game.state.level + 1\n        document.querySelector('#level').classList.remove('hidden')\n    }\n}\n\nexport const updateScore = () => {\n    document.querySelector('#score').innerText = window.game.state.score\n}\n\nexport const updateStreak = () => {\n    const streak = document.querySelector('#streak')\n    const streakCont = document.querySelector('#streak-container')\n    streak.innerText = Math.floor((1 + window.game.state.streak * 0.1) * 10) / 10\n    if (window.game.state.streak !== 0) {\n        streakCont.classList.remove('hidden')\n        streak.classList.remove('streak-animation')\n        streak.offsetWidth\n        streak.classList.add('streak-animation')\n        //streak.style.color = '#' + (((1 << 24) * Math.random()) | 0).toString(16)\n    } else {\n        streakCont.classList.add('hidden')\n    }\n}\n\nexport const hideLoadingScreen = () => {\n    document.querySelector('#loadingScreen').classList.add('hidden')\n}\n","import { groundY } from '/src/shared/canvas'\nimport { canvas } from '/src/shared/canvas'\nimport { addEventListeners } from '/src/shared/UI'\nimport { loadImage, loadManifest } from '/src/classes/loaders'\n\nexport class PlantFactory {\n    constructor(manifest) {\n        this.manifest = manifest\n    }\n    createPlants(numberOfPlants) {\n        const { width, height, image, loadedPlantImages, potMargin, plantSizes } = this.manifest\n        const plants = []\n        const widthSum = width * numberOfPlants + potMargin * (numberOfPlants - 1)\n        const offset = (canvas.width - widthSum) / 2\n        //plantSizes.reduce((acc, b) => acc + b.width, 0)\n\n        for (let i = 0; i < numberOfPlants; i++) {\n            plants.push(\n                new Plant(\n                    offset + (width + (i === numberOfPlants ? 0 : potMargin)) * i,\n                    groundY - height,\n                    plantSizes,\n                    image,\n                    loadedPlantImages,\n                    i\n                )\n            )\n        }\n        addEventListeners(plants)\n        return plants\n    }\n}\n\nexport class Plant {\n    constructor(positionX, positionY, plantSizes, image, plantImages, id) {\n        this.id = id\n        this.x = positionX\n        this.y = positionY - 15\n        this.size = 0\n        this.plantSizes = plantSizes\n        this.planted = false\n        this.showSeed = true\n        this.plantImages = plantImages\n        this.width = 170\n        this.height = 120\n        this.potCenter = {\n            x: this.x + this.width / 2,\n            y: this.y + this.height / 2\n        }\n        this.image = image\n        this.timeToShowSeedButton = 1\n        this.activePlant = plantSizes[this.size]\n        this.activePlantImage = plantImages[this.size]\n        this.plantBoundingRect = {\n            x: this.potCenter.x - this.activePlant.width / 2,\n            y: this.y - this.activePlant.height,\n            width: this.activePlant.width,\n            height: this.activePlant.height\n        }\n        this.createSeedButton()\n    }\n    draw(ctx) {\n        ctx.drawImage(this.image, this.x, this.y, this.width, this.height)\n        if (this.planted) {\n            ctx.drawImage(\n                this.activePlantImage,\n                this.plantBoundingRect.x,\n                this.plantBoundingRect.y,\n                this.plantBoundingRect.width,\n                this.plantBoundingRect.height\n            )\n        }\n    }\n    grow() {\n        if (this.size < this.plantImages.length - 1 && this.planted) {\n            this.size++\n            this.activePlant = this.plantSizes[this.size]\n            this.activePlantImage = this.plantImages[this.size]\n            this.plantBoundingRect = {\n                x: this.potCenter.x - this.activePlant.width / 2,\n                y: this.y - this.activePlant.height,\n                width: this.activePlant.width,\n                height: this.activePlant.height\n            }\n        }\n    }\n    shrink() {\n        if (this.size > 0 && this.planted) {\n            this.size--\n            this.activePlant = this.plantSizes[this.size]\n            this.activePlantImage = this.plantImages[this.size]\n            this.plantBoundingRect = {\n                x: this.potCenter.x - this.activePlant.width / 2,\n                y: this.y - this.activePlant.height,\n                width: this.activePlant.width,\n                height: this.activePlant.height\n            }\n        } else {\n            this.size = -1\n            this.planted = false\n        }\n    }\n    onClick() {\n        this.grow()\n    }\n    plantSeed() {\n        window.game.state.seedsPlanted += 1\n        this.planted = true\n        document.querySelector(`.seedButton[data-id=\"${this.id}\"]`).outerHTML = ''\n    }\n    showSeedButton() {\n        document.querySelector(`.seedButton[data-id=\"${this.id}\"]`).classList.add('active')\n    }\n    createSeedButton() {\n        overlay.innerHTML += `\n        <div \n            class=\"seedButton\"\n            data-id=\"${this.id}\"\n            style=\"left: ${this.potCenter.x - 40}px; top: ${this.potCenter.y - 160}px;\" \n        >\n            <div class=\"seedButton__image\" data-id=\"${this.id}\">\n            </div>\n        </div>\n        `\n    }\n}\n\nexport const loadPlantFactory = async () => {\n    const manifest = await loadManifest('plant')\n    manifest.image = await loadImage(manifest.mainImageURL)\n    manifest.loadedPlantImages = []\n    Promise.all([\n        loadImage(manifest.plantImages[0]),\n        loadImage(manifest.plantImages[1]),\n        loadImage(manifest.plantImages[2]),\n        loadImage(manifest.plantImages[3])\n    ]).then(async plants => {\n        manifest.loadedPlantImages = await plants\n    })\n    return new PlantFactory(manifest)\n}\n","import { canvas, maskCtx } from '/src/shared/canvas'\nimport { audioPlayer } from '../AudioPlayer'\nimport { loadImage, loadManifest } from './loaders'\n\nexport class Light {\n    constructor(id, positionX, positionY, width, height, image, color, lightWidth, turnOn, numberOfLights) {\n        this.id = id\n        this.width = width\n        this.height = height\n        this.x = positionX\n        this.y = positionY\n        this.lampCenter = {\n            x: this.x + this.width / 2,\n            y: this.y + this.height / 2\n        }\n        this.turnedOn = false\n        this.color = color\n        this.lightWidth = lightWidth\n        this.image = image\n        this.offset = 10\n        this.isShot = false\n        this.perspective = 40\n        this.turnOn = turnOn\n        this.numberOfLights = numberOfLights\n    }\n    drawLight(ctx) {\n        if (this.turnedOn) {\n            ctx.beginPath()\n            //top left\n            ctx.moveTo(this.x + this.offset, this.y + this.height)\n            //bottom left\n            if (this.id == 0) {\n                ctx.lineTo(this.x - this.lightWidth, canvas.height - 65)\n                ctx.lineTo(this.x - this.lightWidth - this.perspective, canvas.height)\n            } else {\n                ctx.lineTo(this.x - this.lightWidth, canvas.height)\n            }\n            //bottom right\n            if (this.id == this.numberOfLights - 1) {\n                ctx.lineTo(this.x + +this.width + this.lightWidth + this.perspective, canvas.height)\n                ctx.lineTo(this.x + this.width + this.lightWidth, canvas.height - 65)\n            } else {\n                ctx.lineTo(this.x + this.width + this.lightWidth, canvas.height)\n            }\n            //top right\n            ctx.lineTo(this.x + this.width - this.offset, this.y + this.height)\n            ctx.closePath()\n            ctx.fillStyle = this.color\n            ctx.fill()\n        }\n    }\n    drawBody(ctx) {\n        ctx.drawImage(this.image, this.x, this.y, this.width, this.height)\n    }\n    draw(ctx) {\n        this.drawBody(ctx)\n        this.drawLight(maskCtx)\n    }\n    onClick() {\n        if (!this.isShot) {\n            audioPlayer.playAudio('glass')\n        }\n        this.isShot = true\n    }\n}\n\nexport class LightFactory {\n    constructor(manifest) {\n        this.manifest = manifest\n    }\n\n    createLights(numberOfLights, delay) {\n        const { width, height, image, color, lightWidth, lightMargin } = this.manifest\n        const lights = []\n        const widthSum = width * numberOfLights + lightMargin * (numberOfLights - 1)\n        const offset = (canvas.width - widthSum) / 2\n\n        for (let i = 0; i < numberOfLights; i++) {\n            const turnOn = i + delay\n            const light = new Light(\n                i,\n                offset + (width + (i === numberOfLights ? 0 : lightMargin)) * i,\n                0,\n                width,\n                height,\n                image,\n                color,\n                lightWidth,\n                turnOn,\n                numberOfLights\n            )\n            lights.push(light)\n        }\n\n        return lights\n    }\n}\n\nexport const loadLightFactory = async () => {\n    const manifest = await loadManifest('light')\n    manifest.image = await loadImage(manifest.mainImageURL)\n    return new LightFactory(manifest)\n}\n","export class Timer {\n    constructor() {\n        this.startTime = 0\n        this.timeElapsed = 0\n    }\n    start() {\n        this.startTime = new Date()\n    }\n    logTimeElapsed() {\n        let timeDiff = (new Date() - this.startTime) / 1000\n        let seconds = Math.round(timeDiff)\n        if (this.timeElapsed != seconds) {\n            this.timeElapsed = seconds\n            //console.log(this.timeElapsed)\n        }\n    }\n    getTimeElapsed() {\n        return this.timeElapsed\n    }\n}\n","export * from './character'\nexport * from './scene'\nexport * from './spider'\nexport * from './plant'\nexport * from './light'\nexport * from './loaders'\nexport * from './timer'\n","export const checkTarget = ({ clientX, clientY }, targets, callback) => {\n    callback(\n        targets.find(\n            target =>\n                !target.isShot &&\n                clientX > target.x &&\n                clientX < target.x + target.width &&\n                clientY > target.y &&\n                clientY < target.y + target.height\n        )\n    )\n}\n","import { ctx, canvas, mask, maskCtx } from '/src/shared/canvas'\nimport { loadCharacter, loadScene, loadLightFactory, loadSpiderFactory, loadPlantFactory, Timer } from './classes'\nimport { randomIntFromRange } from '/src/shared/helpers'\nimport { showGameOver, updateLevel, hideLoadingScreen, updateScore } from '/src/shared/UI'\nimport { audioPlayer } from './AudioPlayer'\n\nimport { checkTarget } from '/src/clickHandler'\nimport { updateStreak } from '/src/shared/UI'\n\nexport const GameLoop = async config => {\n    window.game = {\n        config: config,\n        state: {\n            seedsPlanted: 0,\n            seedsShown: false,\n            spidersKilled: 0,\n            spidersKilledTotal: 0,\n            level: -1,\n            currentLevel: -1,\n            gameOver: false,\n            levelUpdated: false,\n            score: 0,\n            streak: 0,\n            biggestStreak: 0\n        }\n    }\n    console.log('1')\n\n    const timer = new Timer()\n    const character = await loadCharacter()\n    const scene = await loadScene()\n    const plantFactory = await loadPlantFactory()\n    const lightFactory = await loadLightFactory()\n    const spiderFactory = await loadSpiderFactory()\n    await audioPlayer.loadAllSounds()\n\n    audioPlayer.playAudio('music')\n\n    const plants = plantFactory.createPlants(config.settings.plants.numberOfPots)\n    const lamps = lightFactory.createLights(config.settings.lights.numberOfLights, config.timing.startLights)\n    let spiders = []\n\n    //character.epicEntrance().then(() => {})\n\n    canvas.addEventListener('mousedown', e => {\n        checkTarget(e, [...spiders], entity => {\n            if (entity) entity.onClick()\n            else {\n                window.game.state.streak = 0\n            }\n            updateScore()\n            updateStreak(character.streak)\n        })\n        checkTarget(e, [...lamps, ...plants], entity => {\n            if (entity) entity.onClick()\n        })\n    })\n\n    const nextLevel = () => {\n        window.game.state.currentLevel = window.game.state.level\n        window.game.state.levelUpdated = false\n        window.game.state.spidersKilled = 0\n        spiders = []\n    }\n\n    timer.start()\n    console.log('2')\n\n    // forcing loading screen to see the amazingness\n    //setTimeout(() => hideLoadingScreen(), 2000)\n    hideLoadingScreen()\n\n    const gameLoop = () => {\n        ctx.globalCompositeOperation = 'normal'\n\n        scene.draw(ctx)\n\n        character.move()\n\n        spiders.forEach(spider => {\n            spider.draw(ctx)\n        })\n\n        if (!window.game.state.levelUpdated) {\n            window.game.state.levelUpdated = true\n            updateLevel()\n        }\n\n        if (config.timing.showSeeds == timer.getTimeElapsed()) {\n            window.game.state.level = 0\n            updateLevel()\n        }\n\n        if (window.game.state.level === 0 && window.game.state.currentLevel !== window.game.state.level) {\n            if (window.game.state.seedsPlanted == plants.length) {\n                if (spiders.length == 0) {\n                    spiders = spiderFactory.createSpiders(\n                        window.game.config.levels[0].numberOfSpiders,\n                        character,\n                        plants\n                    )\n                }\n            }\n            if (!window.game.state.seedsShown) {\n                window.game.state.seedsShown = true\n                plants.forEach(plant => {\n                    if (plant.showSeed) {\n                        plant.showSeedButton()\n                        plant.showSeed = false\n                    }\n                })\n            }\n        } else if (window.game.state.level === 1 && window.game.state.currentLevel !== window.game.state.level) {\n            nextLevel()\n            plants.forEach(plant => {\n                plant.grow()\n            })\n            //window.game.state.gameOver = true\n            window.game.plants = plants\n            spiders = spiderFactory.createSpiders(window.game.config.levels[1].numberOfSpiders, character, plants)\n        } else if (window.game.state.level === 2 && window.game.state.currentLevel !== window.game.state.level) {\n            nextLevel()\n            plants.forEach(plant => {\n                plant.grow()\n            })\n            spiders = spiderFactory.createSpiders(window.game.config.levels[2].numberOfSpiders, character, plants)\n        } else if (window.game.state.level === 3 && window.game.state.currentLevel !== window.game.state.level) {\n            nextLevel()\n            plants.forEach(plant => {\n                plant.grow()\n            })\n            spiders = spiderFactory.createSpiders(window.game.config.levels[3].numberOfSpiders, character, plants)\n        } else if (window.game.state.level === 4 && window.game.state.currentLevel !== window.game.state.level) {\n            nextLevel()\n            window.game.state.gameOver = true\n            window.game.plants = plants\n        }\n\n        plants.forEach(plant => {\n            plant.draw(ctx)\n        })\n\n        character.draw(ctx)\n\n        // drawing a black mask over the whole screen\n        maskCtx.fillStyle = 'rgb(68, 68, 68)'\n        //maskCtx.fillStyle = \"rgb(45, 45, 45)\";\n        maskCtx.fillRect(0, 0, mask.width, mask.height)\n\n        character.drawFlash(maskCtx)\n        // adding \"white\" light onto the mask\n        lamps.forEach(lamp => {\n            if (!lamp.isShot) {\n                if (!lamp.turnedOn && lamp.turnOn == timer.getTimeElapsed()) {\n                    lamp.turnedOn = true\n                }\n                lamp.drawBody(ctx)\n                lamp.drawLight(maskCtx)\n            } else {\n                lamp.drawBody(ctx)\n            }\n        })\n\n        // multiply the mask with the underlying canvas\n        ctx.globalCompositeOperation = 'multiply'\n        ctx.drawImage(mask, 0, 0)\n        timer.logTimeElapsed()\n\n        if (!window.game.state.gameOver) {\n            window.requestAnimationFrame(gameLoop)\n        } else {\n            showGameOver()\n        }\n    }\n\n    return () => {\n        //setInterval(gameLoop, 1000 / 60)\n        window.requestAnimationFrame(gameLoop)\n    }\n}\n","module.exports={name:\"Plants and Spiders\",settings:{plants:{numberOfPots:3},lights:{numberOfLights:3}},timing:{showSeeds:5,startLights:2,delayBetweenLights:1},levels:[{id:0,numberOfSpiders:30},{id:1,numberOfSpiders:15},{id:2,numberOfSpiders:20},{id:3,numberOfSpiders:25}]};","import { GameLoop } from './gameLoop'\nimport config from '/static/manifests/gameConfig.json'\nimport './style.css'\n\nconst titleScreen = document.querySelector('#titleScreen')\nconst tutorialScreen = document.querySelector('#tutorialScreen')\ntitleScreen.addEventListener('click', () => {\n    titleScreen.classList.add('hidden')\n\n    tutorialScreen.addEventListener('click', () => {\n        tutorialScreen.classList.add('hidden')\n\n        GameLoop(config).then(startGame => {\n            console.log('All systems are go!')\n            startGame()\n        })\n    })\n})\n\n/*features:\n- walk up to a plant to grow\n- shadows undercharacters\n- \n*/\n\n/* \n    GAME IDEA:\n    - player starts with planting plants\n    - spiders are coming towards your plants and want to eat them\n    - protect plants against spiders by shooting them\n    - plants grow every round\n    - spider touching a plant will cause the plant losing one growth cycle thus becoming smaller\n    - there will be more spiders and they will be faster or smaller each round (making them harder to hit)\n    - each spider picks one of the plants to attack at the beginning of his journey\n    - you get points subtracted every time you miss a shot\n    - collect plants at the end after 4 rounds, your score depends on how much of your plants is left\n    - best achievable score is when all plants are fully grown after 4 rounds and you have missed no shots\n*/\n"]}